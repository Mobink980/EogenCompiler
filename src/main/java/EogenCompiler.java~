/* The following code was generated by JFlex 1.7.0 */

import java.util.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>eogencompiler.flex</tt>
 */
class EogenCompiler {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\54\1\3\1\2\1\0\1\3\1\1\16\54\4\0\1\3\1\0"+
    "\1\56\1\0\1\53\2\0\1\12\1\47\1\50\1\5\1\41\1\0"+
    "\1\15\1\13\1\4\1\6\3\7\4\7\2\7\3\0\1\52\3\0"+
    "\4\11\1\14\1\11\21\53\1\10\2\53\1\44\1\12\1\46\1\43"+
    "\1\53\1\0\1\22\1\33\1\21\1\36\1\26\1\24\1\53\1\23"+
    "\1\30\1\53\1\40\1\31\1\42\1\37\1\25\1\45\1\53\1\17"+
    "\1\32\1\16\1\35\1\34\1\27\1\10\1\20\1\53\1\51\1\0"+
    "\1\55\1\0\41\54\2\0\4\53\4\0\1\53\2\0\1\54\7\0"+
    "\1\53\4\0\1\53\5\0\27\53\1\0\37\53\1\0\u01ca\53\4\0"+
    "\14\53\16\0\5\53\7\0\1\53\1\0\1\53\21\0\160\54\5\53"+
    "\1\0\2\53\2\0\4\53\1\0\1\53\6\0\1\53\1\0\3\53"+
    "\1\0\1\53\1\0\24\53\1\0\123\53\1\0\213\53\1\0\5\54"+
    "\2\0\246\53\1\0\46\53\2\0\1\53\7\0\47\53\7\0\1\53"+
    "\1\0\55\54\1\0\1\54\1\0\2\54\1\0\2\54\1\0\1\54"+
    "\10\0\33\53\5\0\3\53\15\0\6\54\5\0\1\53\4\0\13\54"+
    "\1\0\1\54\3\0\53\53\37\54\4\0\2\53\1\54\143\53\1\0"+
    "\1\53\10\54\1\0\6\54\2\53\2\54\1\0\4\54\2\53\12\54"+
    "\3\53\2\0\1\53\17\0\1\54\1\53\1\54\36\53\33\54\2\0"+
    "\131\53\13\54\1\53\16\0\12\54\41\53\11\54\2\53\4\0\1\53"+
    "\5\0\26\53\4\54\1\53\11\54\1\53\3\54\1\53\5\54\22\0"+
    "\31\53\3\54\4\0\13\53\65\0\25\53\1\0\10\53\26\0\60\54"+
    "\66\53\3\54\1\53\22\54\1\53\7\54\12\53\2\54\2\0\12\54"+
    "\1\0\20\53\3\54\1\0\10\53\2\0\2\53\2\0\26\53\1\0"+
    "\7\53\1\0\1\53\3\0\4\53\2\0\1\54\1\53\7\54\2\0"+
    "\2\54\2\0\3\54\1\53\10\0\1\54\4\0\2\53\1\0\3\53"+
    "\2\54\2\0\12\54\4\53\7\0\2\53\4\0\3\54\1\0\6\53"+
    "\4\0\2\53\2\0\26\53\1\0\7\53\1\0\2\53\1\0\2\53"+
    "\1\0\2\53\2\0\1\54\1\0\5\54\4\0\2\54\2\0\3\54"+
    "\3\0\1\54\7\0\4\53\1\0\1\53\7\0\14\54\3\53\1\54"+
    "\13\0\3\54\1\0\11\53\1\0\3\53\1\0\26\53\1\0\7\53"+
    "\1\0\2\53\1\0\5\53\2\0\1\54\1\53\10\54\1\0\3\54"+
    "\1\0\3\54\2\0\1\53\17\0\2\53\2\54\2\0\12\54\1\0"+
    "\1\53\7\0\1\53\6\54\1\0\3\54\1\0\10\53\2\0\2\53"+
    "\2\0\26\53\1\0\7\53\1\0\2\53\1\0\5\53\2\0\1\54"+
    "\1\53\7\54\2\0\2\54\2\0\3\54\10\0\2\54\4\0\2\53"+
    "\1\0\3\53\2\54\2\0\12\54\1\0\1\53\20\0\1\54\1\53"+
    "\1\0\6\53\3\0\3\53\1\0\4\53\3\0\2\53\1\0\1\53"+
    "\1\0\2\53\3\0\2\53\3\0\3\53\3\0\14\53\4\0\5\54"+
    "\3\0\3\54\1\0\4\54\2\0\1\53\6\0\1\54\16\0\12\54"+
    "\11\0\1\53\6\0\4\54\1\0\10\53\1\0\3\53\1\0\27\53"+
    "\1\0\20\53\3\0\1\53\7\54\1\0\3\54\1\0\4\54\7\0"+
    "\2\54\1\0\3\53\5\0\2\53\2\54\2\0\12\54\20\0\1\53"+
    "\3\54\1\0\10\53\1\0\3\53\1\0\27\53\1\0\12\53\1\0"+
    "\5\53\2\0\1\54\1\53\7\54\1\0\3\54\1\0\4\54\7\0"+
    "\2\54\7\0\1\53\1\0\2\53\2\54\2\0\12\54\1\0\2\53"+
    "\15\0\4\54\1\0\10\53\1\0\3\53\1\0\51\53\2\54\1\53"+
    "\7\54\1\0\3\54\1\0\4\54\1\53\5\0\3\53\1\54\7\0"+
    "\3\53\2\54\2\0\12\54\12\0\6\53\2\0\2\54\1\0\22\53"+
    "\3\0\30\53\1\0\11\53\1\0\1\53\2\0\7\53\3\0\1\54"+
    "\4\0\6\54\1\0\1\54\1\0\10\54\6\0\12\54\2\0\2\54"+
    "\15\0\60\53\1\54\2\53\7\54\4\0\10\53\10\54\1\0\12\54"+
    "\47\0\2\53\1\0\1\53\2\0\2\53\1\0\1\53\2\0\1\53"+
    "\6\0\4\53\1\0\7\53\1\0\3\53\1\0\1\53\1\0\1\53"+
    "\2\0\2\53\1\0\4\53\1\54\2\53\6\54\1\0\2\54\1\53"+
    "\2\0\5\53\1\0\1\53\1\0\6\54\2\0\12\54\2\0\4\53"+
    "\40\0\1\53\27\0\2\54\6\0\12\54\13\0\1\54\1\0\1\54"+
    "\1\0\1\54\4\0\2\54\10\53\1\0\44\53\4\0\24\54\1\0"+
    "\2\54\5\53\13\54\1\0\44\54\11\0\1\54\71\0\53\53\24\54"+
    "\1\53\12\54\6\0\6\53\4\54\4\53\3\54\1\53\3\54\2\53"+
    "\7\54\3\53\4\54\15\53\14\54\1\53\17\54\2\0\46\53\1\0"+
    "\1\53\5\0\1\53\2\0\53\53\1\0\u014d\53\1\0\4\53\2\0"+
    "\7\53\1\0\1\53\1\0\4\53\2\0\51\53\1\0\4\53\2\0"+
    "\41\53\1\0\4\53\2\0\7\53\1\0\1\53\1\0\4\53\2\0"+
    "\17\53\1\0\71\53\1\0\4\53\2\0\103\53\2\0\3\54\40\0"+
    "\20\53\20\0\126\53\2\0\6\53\3\0\u026c\53\2\0\21\53\1\0"+
    "\32\53\5\0\113\53\3\0\13\53\7\0\15\53\1\0\4\53\3\54"+
    "\13\0\22\53\3\54\13\0\22\53\2\54\14\0\15\53\1\0\3\53"+
    "\1\0\2\54\14\0\64\53\40\54\3\0\1\53\3\0\2\53\1\54"+
    "\2\0\12\54\41\0\4\54\1\0\12\54\6\0\130\53\10\0\5\53"+
    "\2\54\42\53\1\54\1\53\5\0\106\53\12\0\37\53\1\0\14\54"+
    "\4\0\14\54\12\0\12\54\36\53\2\0\5\53\13\0\54\53\4\0"+
    "\32\53\6\0\12\54\46\0\27\53\5\54\4\0\65\53\12\54\1\0"+
    "\35\54\2\0\13\54\6\0\12\54\15\0\1\53\10\0\16\54\102\0"+
    "\5\54\57\53\21\54\7\53\4\0\12\54\21\0\11\54\14\0\3\54"+
    "\36\53\15\54\2\53\12\54\54\53\16\54\14\0\44\53\24\54\10\0"+
    "\12\54\3\0\3\53\12\54\44\53\2\0\11\53\107\0\3\54\1\0"+
    "\25\54\4\53\1\54\4\53\3\54\2\53\3\54\6\0\300\53\72\54"+
    "\1\0\5\54\u0116\53\2\0\6\53\2\0\46\53\2\0\6\53\2\0"+
    "\10\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0\37\53\2\0"+
    "\65\53\1\0\7\53\1\0\1\53\3\0\3\53\1\0\7\53\3\0"+
    "\4\53\2\0\6\53\4\0\15\53\5\0\3\53\1\0\7\53\16\0"+
    "\5\54\32\0\5\54\20\0\2\53\23\0\1\53\13\0\5\54\1\0"+
    "\12\54\1\0\1\53\15\0\1\53\20\0\15\53\3\0\40\53\20\0"+
    "\15\54\4\0\1\54\3\0\14\54\21\0\1\53\4\0\1\53\2\0"+
    "\12\53\1\0\1\53\3\0\5\53\6\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\4\53\1\0\13\53\2\0\4\53\5\0\5\53\4\0"+
    "\1\53\21\0\51\53\u0a77\0\57\53\1\0\57\53\1\0\205\53\6\0"+
    "\4\53\3\54\2\53\14\0\46\53\1\0\1\53\5\0\1\53\2\0"+
    "\70\53\7\0\1\53\17\0\1\54\27\53\11\0\7\53\1\0\7\53"+
    "\1\0\7\53\1\0\7\53\1\0\7\53\1\0\7\53\1\0\7\53"+
    "\1\0\7\53\1\0\40\54\57\0\1\53\u01d5\0\3\53\31\0\11\53"+
    "\6\54\1\0\5\53\2\0\5\53\4\0\126\53\2\0\2\54\2\0"+
    "\3\53\1\0\132\53\1\0\4\53\5\0\52\53\2\0\136\53\21\0"+
    "\33\53\65\0\20\53\u0200\0\u19b6\53\112\0\u51eb\53\25\0\u048d\53\103\0"+
    "\56\53\2\0\u010d\53\3\0\20\53\12\54\2\53\24\0\57\53\1\54"+
    "\4\0\12\54\1\0\37\53\2\54\120\53\2\54\45\0\11\53\2\0"+
    "\147\53\2\0\44\53\1\0\10\53\77\0\13\53\1\54\3\53\1\54"+
    "\4\53\1\54\27\53\5\54\20\0\1\53\7\0\64\53\14\0\2\54"+
    "\62\53\22\54\12\0\12\54\6\0\22\54\6\53\3\0\1\53\1\0"+
    "\1\53\2\0\12\54\34\53\10\54\2\0\27\53\15\54\14\0\35\53"+
    "\3\0\4\54\57\53\16\54\16\0\1\53\12\54\6\0\5\53\1\54"+
    "\12\53\12\54\5\53\1\0\51\53\16\54\11\0\3\53\1\54\10\53"+
    "\2\54\2\0\12\54\6\0\27\53\3\0\1\53\3\54\62\53\1\54"+
    "\1\53\3\54\2\53\2\54\5\53\2\54\1\53\1\54\1\53\30\0"+
    "\3\53\2\0\13\53\5\54\2\0\3\53\2\54\12\0\6\53\2\0"+
    "\6\53\2\0\6\53\11\0\7\53\1\0\7\53\1\0\53\53\1\0"+
    "\12\53\12\0\163\53\10\54\1\0\2\54\2\0\12\54\6\0\u2ba4\53"+
    "\14\0\27\53\4\0\61\53\u2104\0\u016e\53\2\0\152\53\46\0\7\53"+
    "\14\0\5\53\5\0\1\53\1\54\12\53\1\0\15\53\1\0\5\53"+
    "\1\0\1\53\1\0\2\53\1\0\2\53\1\0\154\53\41\0\u016b\53"+
    "\22\0\100\53\2\0\66\53\50\0\15\53\3\0\20\54\20\0\20\54"+
    "\3\0\2\53\30\0\3\53\31\0\1\53\6\0\5\53\1\0\207\53"+
    "\2\0\1\54\4\0\1\53\13\0\12\54\7\0\32\53\4\0\1\53"+
    "\1\0\32\53\13\0\131\53\3\0\6\53\2\0\6\53\2\0\6\53"+
    "\2\0\3\53\3\0\2\53\3\0\2\53\22\0\3\54\4\0\14\53"+
    "\1\0\32\53\1\0\23\53\1\0\2\53\1\0\17\53\2\0\16\53"+
    "\42\0\173\53\105\0\65\53\210\0\1\54\202\0\35\53\3\0\61\53"+
    "\17\0\1\54\37\0\40\53\15\0\36\53\5\0\46\53\5\54\5\0"+
    "\36\53\2\0\44\53\4\0\10\53\1\0\5\53\52\0\236\53\2\0"+
    "\12\54\6\0\44\53\4\0\44\53\4\0\50\53\10\0\64\53\234\0"+
    "\u0137\53\11\0\26\53\12\0\10\53\230\0\6\53\2\0\1\53\1\0"+
    "\54\53\1\0\2\53\3\0\1\53\2\0\27\53\12\0\27\53\11\0"+
    "\37\53\101\0\23\53\1\0\2\53\12\0\26\53\12\0\32\53\106\0"+
    "\70\53\6\0\2\53\100\0\1\53\3\54\1\0\2\54\5\0\4\54"+
    "\4\53\1\0\3\53\1\0\33\53\4\0\3\54\4\0\1\54\40\0"+
    "\35\53\3\0\35\53\43\0\10\53\1\0\34\53\2\54\31\0\66\53"+
    "\12\0\26\53\12\0\23\53\15\0\22\53\156\0\111\53\67\0\63\53"+
    "\15\0\63\53\u030d\0\3\54\65\53\17\54\37\0\12\54\17\0\4\54"+
    "\55\53\13\54\2\0\1\54\22\0\31\53\7\0\12\54\6\0\3\54"+
    "\44\53\16\54\1\0\12\54\20\0\43\53\1\54\2\0\1\53\11\0"+
    "\3\54\60\53\16\54\4\53\5\0\3\54\3\0\12\54\1\53\1\0"+
    "\1\53\43\0\22\53\1\0\31\53\14\54\6\0\1\54\101\0\7\53"+
    "\1\0\1\53\1\0\4\53\1\0\17\53\1\0\12\53\7\0\57\53"+
    "\14\54\5\0\12\54\6\0\4\54\1\0\10\53\2\0\2\53\2\0"+
    "\26\53\1\0\7\53\1\0\2\53\1\0\5\53\2\0\1\54\1\53"+
    "\7\54\2\0\2\54\2\0\3\54\2\0\1\53\6\0\1\54\5\0"+
    "\5\53\2\54\2\0\7\54\3\0\5\54\213\0\65\53\22\54\4\53"+
    "\5\0\12\54\46\0\60\53\24\54\2\53\1\0\1\53\10\0\12\54"+
    "\246\0\57\53\7\54\2\0\11\54\27\0\4\53\2\54\42\0\60\53"+
    "\21\54\3\0\1\53\13\0\12\54\46\0\53\53\15\54\10\0\12\54"+
    "\66\0\32\53\3\0\17\54\4\0\12\54\u0166\0\100\53\12\54\25\0"+
    "\1\53\u0100\0\1\53\12\54\50\53\7\54\1\53\4\54\10\0\1\54"+
    "\10\0\1\53\13\54\50\53\2\0\4\53\20\54\46\0\71\53\u0107\0"+
    "\11\53\1\0\45\53\10\54\1\0\10\54\1\53\17\0\12\54\30\0"+
    "\36\53\2\0\26\54\1\0\16\54\111\0\7\53\1\0\2\53\1\0"+
    "\46\53\6\54\3\0\1\54\1\0\2\54\1\0\7\54\1\53\1\54"+
    "\10\0\12\54\u02a6\0\u039a\53\146\0\157\53\21\0\304\53\u0abc\0\u042f\53"+
    "\u0fd1\0\u0247\53\u21b9\0\u0239\53\7\0\37\53\1\0\12\54\146\0\36\53"+
    "\2\0\5\54\13\0\60\53\7\54\11\0\4\53\14\0\12\54\11\0"+
    "\25\53\5\0\23\53\u0370\0\105\53\13\0\1\53\56\54\20\0\4\54"+
    "\15\53\100\0\2\53\36\0\u17ed\53\23\0\u02f3\53\u250d\0\u011f\53\121\0"+
    "\u018c\53\u0904\0\153\53\5\0\15\53\3\0\11\53\7\0\12\53\3\0"+
    "\2\54\1\0\4\54\u14c1\0\5\54\3\0\26\54\2\0\7\54\36\0"+
    "\4\54\224\0\3\54\u01bb\0\125\53\1\0\107\53\1\0\2\53\2\0"+
    "\1\53\2\0\2\53\2\0\4\53\1\0\14\53\1\0\1\53\1\0"+
    "\7\53\1\0\101\53\1\0\4\53\2\0\10\53\1\0\7\53\1\0"+
    "\34\53\1\0\4\53\1\0\5\53\1\0\1\53\3\0\7\53\1\0"+
    "\u0154\53\2\0\31\53\1\0\31\53\1\0\37\53\1\0\31\53\1\0"+
    "\37\53\1\0\31\53\1\0\37\53\1\0\31\53\1\0\37\53\1\0"+
    "\31\53\1\0\10\53\2\0\62\54\u0200\0\67\54\4\0\62\54\10\0"+
    "\1\54\16\0\1\54\26\0\5\54\1\0\17\54\u0550\0\7\54\1\0"+
    "\21\54\2\0\7\54\1\0\2\54\1\0\5\54\u07d5\0\305\53\13\0"+
    "\7\54\51\0\104\53\7\54\5\0\12\54\u04a6\0\4\53\1\0\33\53"+
    "\1\0\2\53\1\0\1\53\2\0\1\53\1\0\12\53\1\0\4\53"+
    "\1\0\1\53\1\0\1\53\6\0\1\53\4\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\3\53\1\0\2\53\1\0\1\53\2\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\1\0\1\53\2\0\4\53\1\0\7\53\1\0\4\53\1\0\4\53"+
    "\1\0\1\53\1\0\12\53\1\0\21\53\5\0\3\53\1\0\5\53"+
    "\1\0\21\53\u1144\0\ua6d7\53\51\0\u1035\53\13\0\336\53\2\0\u1682\53"+
    "\16\0\u1d31\53\u0c1f\0\u021e\53\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\54\36\0\140\54\200\0\360\54\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\2\5\1\6\1\7"+
    "\1\10\10\1\1\11\1\1\1\12\1\1\1\13\1\14"+
    "\1\1\1\15\2\0\1\2\2\0\1\5\10\0\1\16"+
    "\1\17\6\0\2\20\2\2\1\0\3\5\1\0\1\21"+
    "\2\0\1\22\7\0\1\23\2\0\1\5\14\0\1\5"+
    "\1\24\1\25\4\0\1\26\5\0\1\5\4\0\1\27"+
    "\5\0\1\5\1\30\1\0\1\31\1\0\1\32\3\0"+
    "\1\20\1\33\1\5\1\34\3\0\1\5\2\0\1\35"+
    "\1\5\1\36\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\57\0\353\0\u011a"+
    "\0\57\0\u0149\0\57\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234"+
    "\0\u0263\0\u0292\0\u02c1\0\57\0\u02f0\0\57\0\u031f\0\u034e"+
    "\0\57\0\u034e\0\57\0\215\0\u037d\0\u03ac\0\u03db\0\u040a"+
    "\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582"+
    "\0\u05b1\0\57\0\57\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c"+
    "\0\u06cb\0\u06fa\0\57\0\u0729\0\57\0\u0758\0\u040a\0\u0787"+
    "\0\u07b6\0\u07b6\0\57\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1"+
    "\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\57\0\u09bb\0\u09ea"+
    "\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62"+
    "\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\57\0\57"+
    "\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\57\0\u0d67\0\u0d96\0\u0dc5"+
    "\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\57"+
    "\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\57\0\u1057"+
    "\0\57\0\u1086\0\57\0\u10b5\0\u10e4\0\u1113\0\u1142\0\57"+
    "\0\u1171\0\57\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b"+
    "\0\57\0\57\0\57\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\2\2"+
    "\1\11\1\12\1\2\1\13\1\14\2\2\1\15\2\2"+
    "\1\16\1\17\1\2\1\20\1\21\1\2\1\22\1\23"+
    "\5\2\1\24\1\25\1\26\1\27\2\2\1\30\1\31"+
    "\2\32\3\2\1\33\60\0\1\34\1\4\1\34\4\0"+
    "\2\35\2\0\1\35\1\0\23\35\1\0\1\35\2\0"+
    "\1\35\5\0\1\35\4\0\3\34\4\0\2\35\2\0"+
    "\1\35\1\0\23\35\1\0\1\35\2\0\1\35\5\0"+
    "\1\35\7\0\1\36\1\37\57\0\2\10\1\40\2\0"+
    "\1\41\1\42\11\0\1\42\36\0\2\10\3\0\1\41"+
    "\1\42\11\0\1\42\36\0\2\41\66\0\1\43\61\0"+
    "\1\44\6\0\1\45\52\0\1\46\7\0\1\47\45\0"+
    "\1\50\55\0\1\51\57\0\1\52\5\0\1\53\53\0"+
    "\1\54\51\0\1\55\3\0\1\56\55\0\1\57\32\0"+
    "\3\60\4\0\2\35\2\0\1\35\1\0\10\35\1\61"+
    "\12\35\1\0\1\35\2\0\1\35\5\0\1\35\13\0"+
    "\2\35\2\0\1\35\1\0\23\35\1\0\1\35\2\0"+
    "\1\35\5\0\1\35\4\0\3\62\2\0\4\35\2\0"+
    "\1\35\1\0\23\35\1\0\1\35\1\0\1\63\1\35"+
    "\4\63\1\0\2\35\1\63\1\0\1\36\1\64\1\65"+
    "\54\36\5\37\1\66\51\37\6\0\1\67\1\70\1\0"+
    "\1\70\2\0\1\70\4\0\2\70\1\0\1\70\1\0"+
    "\1\70\4\0\1\70\2\0\1\70\26\0\2\41\4\0"+
    "\1\42\11\0\1\42\36\0\2\71\5\0\1\72\23\0"+
    "\1\72\35\0\1\73\54\0\1\74\62\0\1\75\53\0"+
    "\1\76\76\0\1\77\40\0\1\100\6\0\1\101\56\0"+
    "\1\102\56\0\1\103\60\0\1\104\47\0\1\105\71\0"+
    "\1\106\21\0\3\60\22\0\1\107\31\0\3\62\2\0"+
    "\4\35\2\0\1\35\1\0\23\35\1\0\1\110\1\0"+
    "\1\63\1\35\4\63\1\0\2\35\1\63\2\0\3\62"+
    "\55\0\1\65\54\0\4\37\1\65\1\66\51\37\6\0"+
    "\2\111\1\0\1\111\2\0\1\111\4\0\2\111\1\0"+
    "\1\111\1\0\1\111\4\0\1\111\2\0\1\111\26\0"+
    "\2\71\70\0\1\112\67\0\1\113\52\0\1\114\51\0"+
    "\1\115\66\0\1\116\64\0\1\117\50\0\1\120\43\0"+
    "\1\121\66\0\1\122\52\0\1\123\76\0\1\124\15\0"+
    "\3\62\2\0\4\35\2\0\1\35\1\0\23\35\1\0"+
    "\1\35\1\0\1\63\1\125\4\63\1\0\2\35\1\63"+
    "\7\0\2\126\1\0\1\126\2\0\1\126\4\0\2\126"+
    "\1\0\1\126\1\0\1\126\4\0\1\126\2\0\1\126"+
    "\43\0\1\127\65\0\1\130\46\0\1\131\52\0\1\132"+
    "\62\0\1\133\66\0\1\134\52\0\1\135\51\0\1\136"+
    "\73\0\1\137\54\0\1\140\67\0\1\141\12\0\3\62"+
    "\2\0\4\35\2\0\1\35\1\0\1\142\22\35\1\0"+
    "\1\35\1\0\1\63\1\35\4\63\1\0\2\35\1\63"+
    "\7\0\2\143\1\0\1\143\2\0\1\143\4\0\2\143"+
    "\1\0\1\143\1\0\1\143\4\0\1\143\2\0\1\143"+
    "\41\0\1\144\65\0\1\145\60\0\1\146\42\0\1\147"+
    "\63\0\1\150\60\0\1\151\57\0\1\152\1\0\1\153"+
    "\44\0\1\154\41\0\3\62\2\0\4\35\2\0\1\35"+
    "\1\0\2\35\1\155\20\35\1\0\1\35\1\0\1\63"+
    "\1\35\4\63\1\0\2\35\1\63\7\0\2\156\1\0"+
    "\1\156\2\0\1\156\4\0\2\156\1\0\1\156\1\0"+
    "\1\156\4\0\1\156\2\0\1\156\43\0\1\157\60\0"+
    "\1\160\63\0\1\161\46\0\1\162\73\0\1\163\50\0"+
    "\1\164\52\0\1\165\51\0\1\166\37\0\3\167\2\0"+
    "\4\35\2\0\1\35\1\0\23\35\1\0\1\35\1\0"+
    "\1\63\1\35\1\170\3\63\1\0\2\35\1\63\7\0"+
    "\2\171\1\0\1\171\2\0\1\171\4\0\2\171\1\0"+
    "\1\171\1\0\1\171\4\0\1\171\2\0\1\171\57\0"+
    "\1\172\56\0\1\173\47\0\1\174\63\0\1\175\22\0"+
    "\3\166\42\0\1\170\11\0\3\167\42\0\1\170\16\0"+
    "\2\176\1\0\1\176\2\0\1\176\4\0\2\176\1\0"+
    "\1\176\1\0\1\176\4\0\1\176\2\0\1\176\41\0"+
    "\1\177\75\0\1\200\35\0\1\201\45\0\2\202\1\0"+
    "\1\202\2\0\1\202\4\0\2\202\1\0\1\202\1\0"+
    "\1\202\4\0\1\202\2\0\1\202\46\0\1\203\56\0"+
    "\1\204\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4794];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\1\11\1\1\1\11"+
    "\10\1\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\0\1\1\2\0\1\1\10\0\2\11\6\0\1\1"+
    "\1\11\1\1\1\11\1\0\3\1\1\0\1\11\2\0"+
    "\1\1\7\0\1\11\2\0\1\1\14\0\1\1\2\11"+
    "\4\0\1\11\5\0\1\1\4\0\1\11\5\0\1\1"+
    "\1\11\1\0\1\11\1\0\1\11\3\0\1\1\1\11"+
    "\1\1\1\11\3\0\1\1\2\0\4\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public class Tuple {
        public final int line;
        public final int col;
        public final String token;
        public final String type;

        public Tuple(int line, int col, String token, String type) {
            this.line = line;
            this.col = col;
            this.token = token;
            this.type = type;
        }
    }

    HashSet<String> keywords = new HashSet<>(Arrays.asList(
            "if", "else", "while", "switch", "for", "foreach", "class", "behaviour",
            "based", "on", "behaves", "like", "try", "catch", "function",
            "mod", "of", "instance", "empty", "is"
            ));

    boolean foundString = false;
    StringBuilder string = new StringBuilder();

    public class exportToken(int symNum, String text) {

        if (!(symNum == sym.LPAREN || symNum == sym.RPAREN)) {
            text = text.replace("(", "");
            text = text.replace("[", "");
            text = text.replace("{", "");
            text = text.replace(")", "");
            text = text.replace("]", "");
            text = text.replace("}", "");
        }

        if (symNum == sym.IDENTIFIER)
            if (!keywords.contains(kwt.token.trim()))
                return new Symbol(symNum);

        return new Symbol(symNum);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  EogenCompiler(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3448) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { if (foundString) string.append(yytext());
            } 
            // fall through
          case 32: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 33: break;
          case 3: 
            { exportToken(sym.DIVISION, yytext());
            } 
            // fall through
          case 34: break;
          case 4: 
            { exportToken(sym.MULTIPLY, yytext());
            } 
            // fall through
          case 35: break;
          case 5: 
            { exportToken(sym.NUMBER, yytext());
            } 
            // fall through
          case 36: break;
          case 6: 
            { System.out.print(yytext());
            } 
            // fall through
          case 37: break;
          case 7: 
            { exportToken(sym.CHAINSIGN, yytext());
            } 
            // fall through
          case 38: break;
          case 8: 
            { exportToken(sym.SUBTRACT, yytext());
            } 
            // fall through
          case 39: break;
          case 9: 
            { exportToken(sym.SUM, yytext());
            } 
            // fall through
          case 40: break;
          case 10: 
            { exportToken(sym.POWER, yytext());
            } 
            // fall through
          case 41: break;
          case 11: 
            { exportToken(sym.LPAREN, yytext());
            } 
            // fall through
          case 42: break;
          case 12: 
            { exportToken(sym.RPAREN, yytext());
            } 
            // fall through
          case 43: break;
          case 13: 
            { if (!foundString) {
        foundString = true;
        string.append(yytext());
    } else {
        foundString = false;
        string.append(yytext());
        exportToken(sym.STRING, string.toString());
        string.setLength(0);
        string = new StringBuilder();
    }
            } 
            // fall through
          case 44: break;
          case 14: 
            { exportToken(sym.IF, yytext());
            } 
            // fall through
          case 45: break;
          case 15: 
            { exportToken(sym.IS, yytext());
            } 
            // fall through
          case 46: break;
          case 16: 
            { exportToken(sym.IDENTIFIER, yytext());
            } 
            // fall through
          case 47: break;
          case 17: 
            { exportToken(sym.TRY, yytext());
            } 
            // fall through
          case 48: break;
          case 18: 
            { exportToken(sym.FOR, yytext());
            } 
            // fall through
          case 49: break;
          case 19: 
            { exportToken(sym.MOD, yytext());
            } 
            // fall through
          case 50: break;
          case 20: 
            { exportToken(sym.CATCH, yytext());
            } 
            // fall through
          case 51: break;
          case 21: 
            { exportToken(sym.CLASS, yytext());
            } 
            // fall through
          case 52: break;
          case 22: 
            { exportToken(sym.WHILE, yytext());
            } 
            // fall through
          case 53: break;
          case 23: 
            { exportToken(sym.SWITCH, yytext());
            } 
            // fall through
          case 54: break;
          case 24: 
            { exportToken(sym.FOREACH, yytext());
            } 
            // fall through
          case 55: break;
          case 25: 
            { exportToken(sym.OFCLASS, yytext());
            } 
            // fall through
          case 56: break;
          case 26: 
            { exportToken(sym.BASEDON, yytext());
            } 
            // fall through
          case 57: break;
          case 27: 
            { exportToken(sym.EMPTY, yytext());
            } 
            // fall through
          case 58: break;
          case 28: 
            { exportToken(sym.FUNCTION, yytext());
            } 
            // fall through
          case 59: break;
          case 29: 
            { exportToken(sym.BEHAVIOUR, yytext());
            } 
            // fall through
          case 60: break;
          case 30: 
            { exportToken(sym.OFINSTANCE, yytext());
            } 
            // fall through
          case 61: break;
          case 31: 
            { exportToken(sym.BEHAVELIKE, yytext());
            } 
            // fall through
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java EogenCompiler [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        EogenCompiler scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new EogenCompiler(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
