
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import models.*;
import helpers.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class EogenParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public EogenParser() {super();}

  /** Constructor which sets the default scanner. */
  public EogenParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EogenParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\005\000\002\004\003\000\002\004\003\000\002\015" +
    "\007\000\002\015\012\000\002\015\012\000\002\015\015" +
    "\000\002\014\007\000\002\013\011\000\002\013\012\000" +
    "\002\013\013\000\002\013\013\000\002\013\014\000\002" +
    "\013\015\000\002\013\013\000\002\013\014\000\002\013" +
    "\015\000\002\024\011\000\002\024\013\000\002\024\012" +
    "\000\002\020\005\000\002\020\004\000\002\023\002\000" +
    "\002\012\015\000\002\005\015\000\002\006\013\000\002" +
    "\007\011\000\002\016\013\000\002\016\012\000\002\010" +
    "\011\000\002\010\015\000\002\010\012\000\002\010\016" +
    "\000\002\017\011\000\002\017\010\000\002\011\011\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\007\000\002\003\011\000" +
    "\002\003\010\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\004\000\002\003\005\000\002\003\005" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\025\003\000\002" +
    "\021\005\000\002\021\003\000\002\021\003\000\002\022" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\050\002\uffdf\005\021\016\017\025\uffdf\026" +
    "\uffdf\030\uffdf\032\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\050\004\060\005\062\015\063\uffdf\064\013\065" +
    "\006\066\010\001\002\000\120\002\uffb6\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\030\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\050\uffb6\051\uffb6\053\uffb6" +
    "\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\062\uffb6\063" +
    "\uffb6\064\uffb6\065\uffb6\066\uffb6\001\002\000\022\005\021" +
    "\016\017\050\004\060\005\062\015\064\372\065\006\066" +
    "\010\001\002\000\120\002\uffb8\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\030\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\043" +
    "\uffb8\044\uffb8\045\uffb8\050\uffb8\051\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\060\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\065\uffb8\066\uffb8\001\002\000\110\002\ufff4\004\024" +
    "\005\037\006\025\007\033\010\034\011\026\012\023\013" +
    "\041\015\030\016\ufff4\021\ufff4\025\ufff4\026\ufff4\030\ufff4" +
    "\032\ufff4\033\042\034\ufff4\035\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\050\ufff4\051\036\053\032\054\040\055\027\056\031" +
    "\057\035\060\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066" +
    "\ufff4\001\002\000\120\002\uffb7\004\uffb7\005\uffb7\006\uffb7" +
    "\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\030\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\050\uffb7\051\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\060\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\065\uffb7\066\uffb7\001\002\000\120\002\uffb9\004\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\030\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\043\uffb9\044\uffb9\045\uffb9\050\uffb9\051\uffb9" +
    "\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\001\002\000\004" +
    "\002\370\001\002\000\122\002\uffb5\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\030\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\050\uffb5\051\uffb5\052\365\053" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\062\uffb5" +
    "\063\uffb5\064\uffb5\065\uffb5\066\uffb5\001\002\000\050\002" +
    "\000\005\021\016\017\025\120\026\112\030\107\032\103" +
    "\034\115\035\114\043\077\044\116\045\106\050\004\060" +
    "\005\062\015\063\105\064\013\065\006\066\010\001\002" +
    "\000\004\016\065\001\002\000\120\002\uffba\004\uffba\005" +
    "\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba" +
    "\015\uffba\016\uffba\017\uffba\021\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\030\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\043\uffba\044\uffba\045\uffba\050\uffba\051\uffba\053" +
    "\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\062\uffba" +
    "\063\uffba\064\uffba\065\uffba\066\uffba\001\002\000\022\005" +
    "\021\016\017\050\004\060\005\062\015\064\013\065\006" +
    "\066\010\001\002\000\052\002\ufff3\005\ufff3\016\ufff3\021" +
    "\ufff3\025\ufff3\026\ufff3\030\ufff3\032\ufff3\034\ufff3\035\ufff3" +
    "\043\ufff3\044\ufff3\045\ufff3\050\ufff3\060\ufff3\062\ufff3\063" +
    "\ufff3\064\ufff3\065\ufff3\066\ufff3\001\002\000\022\005\021" +
    "\016\017\050\004\060\005\062\015\064\013\065\006\066" +
    "\010\001\002\000\120\002\uffbd\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\030\uffbd\032\uffbd\033\042\034\uffbd\035\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\050\uffbd\051\036\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\062\uffbd\063\uffbd\064" +
    "\uffbd\065\uffbd\066\uffbd\001\002\000\022\005\021\016\017" +
    "\050\004\060\005\062\015\064\013\065\006\066\010\001" +
    "\002\000\022\005\021\016\017\050\004\060\005\062\015" +
    "\064\013\065\006\066\010\001\002\000\022\005\021\016" +
    "\017\050\004\060\005\062\015\064\013\065\006\066\010" +
    "\001\002\000\022\005\021\016\017\050\004\060\005\062" +
    "\015\064\013\065\006\066\010\001\002\000\022\005\021" +
    "\016\017\050\004\060\005\062\015\064\013\065\006\066" +
    "\010\001\002\000\022\005\021\016\017\050\004\060\005" +
    "\062\015\064\013\065\006\066\010\001\002\000\022\005" +
    "\021\016\017\050\004\060\005\062\015\064\013\065\006" +
    "\066\010\001\002\000\022\005\021\016\017\050\004\060" +
    "\005\062\015\064\013\065\006\066\010\001\002\000\022" +
    "\005\021\016\017\050\004\060\005\062\015\064\013\065" +
    "\006\066\010\001\002\000\022\005\021\016\017\050\004" +
    "\060\005\062\015\064\013\065\006\066\010\001\002\000" +
    "\022\005\021\016\017\050\004\060\005\062\015\064\013" +
    "\065\006\066\010\001\002\000\022\005\021\016\017\050" +
    "\004\060\005\062\015\064\013\065\006\066\010\001\002" +
    "\000\022\005\021\016\017\050\004\060\005\062\015\064" +
    "\013\065\006\066\010\001\002\000\022\005\021\016\017" +
    "\050\004\060\005\062\015\064\013\065\006\066\010\001" +
    "\002\000\022\005\021\016\017\050\004\060\005\062\015" +
    "\064\013\065\006\066\010\001\002\000\022\005\021\016" +
    "\017\050\004\060\005\062\015\064\013\065\006\066\010" +
    "\001\002\000\120\002\uffcf\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\030\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\050\uffcf\051\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\062\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\001\002\000\120\002\uffd0\004\024\005" +
    "\037\006\025\007\033\010\034\011\026\012\uffd0\013\uffd0" +
    "\015\030\016\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\030\uffd0\032\uffd0\033\042\034\uffd0" +
    "\035\uffd0\043\uffd0\044\uffd0\045\uffd0\050\uffd0\051\036\053" +
    "\032\054\040\055\027\056\031\057\035\060\uffd0\062\uffd0" +
    "\063\uffd0\064\uffd0\065\uffd0\066\uffd0\001\002\000\120\002" +
    "\uffcb\004\024\005\037\006\025\007\033\010\034\011\026" +
    "\012\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\030\uffcb\032\uffcb" +
    "\033\042\034\uffcb\035\uffcb\043\uffcb\044\uffcb\045\uffcb\050" +
    "\uffcb\051\036\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb" +
    "\060\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\001" +
    "\002\000\120\002\uffc2\004\uffc2\005\uffc2\006\025\007\033" +
    "\010\034\011\026\012\uffc2\013\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\030\uffc2\032\uffc2\033\042\034\uffc2\035\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\050\uffc2\051\036\053\uffc2\054\uffc2\055\uffc2" +
    "\056\uffc2\057\uffc2\060\uffc2\062\uffc2\063\uffc2\064\uffc2\065" +
    "\uffc2\066\uffc2\001\002\000\120\002\uffbc\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\030\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\050\uffbc\051\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\001\002\000\120\002\uffc9" +
    "\004\024\005\037\006\025\007\033\010\034\011\026\012" +
    "\uffc9\013\uffc9\015\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\030\uffc9\032\uffc9\033" +
    "\042\034\uffc9\035\uffc9\043\uffc9\044\uffc9\045\uffc9\050\uffc9" +
    "\051\036\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002" +
    "\000\120\002\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\030" +
    "\uffbe\032\uffbe\033\042\034\uffbe\035\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\050\uffbe\051\036\053\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\001\002\000\120\002\uffc0\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\010\034\011\uffc0\012\uffc0\013\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\030\uffc0\032\uffc0\033\042\034\uffc0\035\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\050\uffc0\051\036\053\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\065\uffc0\066\uffc0\001\002\000\120\002\uffcc\004" +
    "\024\005\037\006\025\007\033\010\034\011\026\012\uffcc" +
    "\013\uffcc\015\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\032\uffcc\033\042" +
    "\034\uffcc\035\uffcc\043\uffcc\044\uffcc\045\uffcc\050\uffcc\051" +
    "\036\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\001\002\000" +
    "\120\002\uffca\004\024\005\037\006\025\007\033\010\034" +
    "\011\026\012\uffca\013\uffca\015\uffca\016\uffca\017\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\030\uffca" +
    "\032\uffca\033\042\034\uffca\035\uffca\043\uffca\044\uffca\045" +
    "\uffca\050\uffca\051\036\053\uffca\054\uffca\055\uffca\056\uffca" +
    "\057\uffca\060\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066" +
    "\uffca\001\002\000\120\002\uffce\004\024\005\037\006\025" +
    "\007\033\010\034\011\026\012\uffce\013\uffce\015\uffce\016" +
    "\uffce\017\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\030\uffce\032\uffce\033\042\034\uffce\035\uffce\043" +
    "\uffce\044\uffce\045\uffce\050\uffce\051\036\053\uffce\054\uffce" +
    "\055\uffce\056\uffce\057\uffce\060\uffce\062\uffce\063\uffce\064" +
    "\uffce\065\uffce\066\uffce\001\002\000\120\002\uffcd\004\024" +
    "\005\037\006\025\007\033\010\034\011\026\012\uffcd\013" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\030\uffcd\032\uffcd\033\042\034" +
    "\uffcd\035\uffcd\043\uffcd\044\uffcd\045\uffcd\050\uffcd\051\036" +
    "\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\062" +
    "\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\001\002\000\120" +
    "\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\034\011" +
    "\uffbf\012\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\030\uffbf\032" +
    "\uffbf\033\042\034\uffbf\035\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\050\uffbf\051\036\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf" +
    "\001\002\000\120\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\010\034\011\uffc1\012\uffc1\013\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\030\uffc1\032\uffc1\033\042\034\uffc1\035\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\050\uffc1\051\036\053\uffc1\054\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\060\uffc1\062\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\001\002\000\120\002\uffc3\004\uffc3\005" +
    "\uffc3\006\025\007\033\010\034\011\026\012\uffc3\013\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\030\uffc3\032\uffc3\033\042\034\uffc3" +
    "\035\uffc3\043\uffc3\044\uffc3\045\uffc3\050\uffc3\051\036\053" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\062\uffc3" +
    "\063\uffc3\064\uffc3\065\uffc3\066\uffc3\001\002\000\120\002" +
    "\uffd1\004\024\005\037\006\025\007\033\010\034\011\026" +
    "\012\uffd1\013\uffd1\015\030\016\uffd1\017\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\030\uffd1\032\uffd1" +
    "\033\042\034\uffd1\035\uffd1\043\uffd1\044\uffd1\045\uffd1\050" +
    "\uffd1\051\036\053\032\054\040\055\027\056\031\057\035" +
    "\060\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\001" +
    "\002\000\044\004\024\005\037\006\025\007\033\010\034" +
    "\011\026\012\023\013\041\015\030\017\064\033\042\051" +
    "\036\053\032\054\040\055\027\056\031\057\035\001\002" +
    "\000\120\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\030" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\050\uffbb\051\uffbb\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb" +
    "\066\uffbb\001\002\000\006\017\066\064\067\001\002\000" +
    "\004\061\361\001\002\000\006\017\071\024\070\001\002" +
    "\000\004\064\357\001\002\000\004\061\353\001\002\000" +
    "\004\017\073\001\002\000\004\061\074\001\002\000\004" +
    "\020\075\001\002\000\050\005\021\016\017\021\uffdf\025" +
    "\uffdf\026\uffdf\030\uffdf\032\uffdf\034\uffdf\035\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\050\004\060\005\062\015\063\uffdf\064" +
    "\013\065\006\066\010\001\002\000\050\005\021\016\017" +
    "\021\100\025\120\026\112\030\107\032\103\034\115\035" +
    "\114\043\077\044\116\045\106\050\004\060\005\062\015" +
    "\063\105\064\013\065\006\066\010\001\002\000\004\064" +
    "\325\001\002\000\120\002\uffe3\004\uffe3\005\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\050\uffe3\051\uffe3\053\uffe3\054\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\062\uffe3\063\uffe3\064" +
    "\uffe3\065\uffe3\066\uffe3\001\002\000\052\002\ufff6\005\ufff6" +
    "\016\ufff6\021\ufff6\025\ufff6\026\ufff6\030\ufff6\032\ufff6\034" +
    "\ufff6\035\ufff6\043\ufff6\044\ufff6\045\ufff6\050\ufff6\060\ufff6" +
    "\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\001\002\000" +
    "\052\002\ufff8\005\ufff8\016\ufff8\021\ufff8\025\ufff8\026\ufff8" +
    "\030\ufff8\032\ufff8\034\ufff8\035\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\050\ufff8\060\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8" +
    "\066\ufff8\001\002\000\004\016\317\001\002\000\052\002" +
    "\ufffe\005\ufffe\016\ufffe\021\ufffe\025\ufffe\026\ufffe\030\ufffe" +
    "\032\ufffe\034\ufffe\035\ufffe\043\ufffe\044\ufffe\045\ufffe\050" +
    "\ufffe\060\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe" +
    "\001\002\000\022\005\021\016\017\050\004\060\005\062" +
    "\015\064\013\065\006\066\010\001\002\000\004\064\243" +
    "\001\002\000\004\016\221\001\002\000\052\002\ufffb\005" +
    "\ufffb\016\ufffb\021\ufffb\025\ufffb\026\ufffb\030\ufffb\032\ufffb" +
    "\034\ufffb\035\ufffb\043\ufffb\044\ufffb\045\ufffb\050\ufffb\060" +
    "\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\001\002" +
    "\000\110\002\uffff\004\024\005\037\006\025\007\033\010" +
    "\034\011\026\012\023\013\041\015\030\016\uffff\021\uffff" +
    "\025\uffff\026\uffff\030\uffff\032\uffff\033\042\034\uffff\035" +
    "\uffff\043\uffff\044\uffff\045\uffff\050\uffff\051\036\053\032" +
    "\054\040\055\027\056\031\057\035\060\uffff\062\uffff\063" +
    "\uffff\064\uffff\065\uffff\066\uffff\001\002\000\004\016\164" +
    "\001\002\000\052\002\ufff7\005\ufff7\016\ufff7\021\ufff7\025" +
    "\ufff7\026\ufff7\030\ufff7\032\ufff7\034\ufff7\035\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\050\ufff7\060\ufff7\062\ufff7\063\ufff7\064" +
    "\ufff7\065\ufff7\066\ufff7\001\002\000\004\020\152\001\002" +
    "\000\004\016\142\001\002\000\004\064\136\001\002\000" +
    "\052\002\ufff9\005\ufff9\016\ufff9\021\ufff9\025\ufff9\026\ufff9" +
    "\030\ufff9\032\ufff9\034\ufff9\035\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\050\ufff9\060\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9" +
    "\066\ufff9\001\002\000\004\016\124\001\002\000\052\002" +
    "\ufffc\005\ufffc\016\ufffc\021\ufffc\025\ufffc\026\ufffc\030\ufffc" +
    "\032\ufffc\034\ufffc\035\ufffc\043\ufffc\044\ufffc\045\ufffc\050" +
    "\ufffc\060\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc" +
    "\001\002\000\052\002\ufffa\005\ufffa\016\ufffa\021\ufffa\025" +
    "\ufffa\026\ufffa\030\ufffa\032\ufffa\034\ufffa\035\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\050\ufffa\060\ufffa\062\ufffa\063\ufffa\064" +
    "\ufffa\065\ufffa\066\ufffa\001\002\000\052\002\ufffd\005\ufffd" +
    "\016\ufffd\021\ufffd\025\ufffd\026\ufffd\030\ufffd\032\ufffd\034" +
    "\ufffd\035\ufffd\043\ufffd\044\ufffd\045\ufffd\050\ufffd\060\ufffd" +
    "\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\001\002\000" +
    "\022\005\021\016\017\050\004\060\005\062\015\064\013" +
    "\065\006\066\010\001\002\000\044\004\024\005\037\006" +
    "\025\007\033\010\034\011\026\012\023\013\041\015\030" +
    "\022\126\033\042\051\036\053\032\054\040\055\027\056" +
    "\031\057\035\001\002\000\022\005\021\016\017\050\004" +
    "\060\005\062\015\064\013\065\006\066\010\001\002\000" +
    "\044\004\024\005\037\006\025\007\033\010\034\011\026" +
    "\012\023\013\041\015\030\022\130\033\042\051\036\053" +
    "\032\054\040\055\027\056\031\057\035\001\002\000\022" +
    "\005\021\016\017\050\004\060\005\062\015\064\013\065" +
    "\006\066\010\001\002\000\044\004\024\005\037\006\025" +
    "\007\033\010\034\011\026\012\023\013\041\015\030\017" +
    "\132\033\042\051\036\053\032\054\040\055\027\056\031" +
    "\057\035\001\002\000\004\020\133\001\002\000\050\005" +
    "\021\016\017\021\uffdf\025\uffdf\026\uffdf\030\uffdf\032\uffdf" +
    "\034\uffdf\035\uffdf\043\uffdf\044\uffdf\045\uffdf\050\004\060" +
    "\005\062\015\063\uffdf\064\013\065\006\066\010\001\002" +
    "\000\050\005\021\016\017\021\135\025\120\026\112\030" +
    "\107\032\103\034\115\035\114\043\077\044\116\045\106" +
    "\050\004\060\005\062\015\063\105\064\013\065\006\066" +
    "\010\001\002\000\052\002\uffdd\005\uffdd\016\uffdd\021\uffdd" +
    "\025\uffdd\026\uffdd\030\uffdd\032\uffdd\034\uffdd\035\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\050\uffdd\060\uffdd\062\uffdd\063\uffdd" +
    "\064\uffdd\065\uffdd\066\uffdd\001\002\000\004\020\137\001" +
    "\002\000\050\005\021\016\017\021\uffdf\025\uffdf\026\uffdf" +
    "\030\uffdf\032\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\050\004\060\005\062\015\063\uffdf\064\013\065\006" +
    "\066\010\001\002\000\050\005\021\016\017\021\141\025" +
    "\120\026\112\030\107\032\103\034\115\035\114\043\077" +
    "\044\116\045\106\050\004\060\005\062\015\063\105\064" +
    "\013\065\006\066\010\001\002\000\052\002\uffee\005\uffee" +
    "\016\uffee\021\uffee\025\uffee\026\uffee\030\uffee\032\uffee\034" +
    "\uffee\035\uffee\043\uffee\044\uffee\045\uffee\050\uffee\060\uffee" +
    "\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee\001\002\000" +
    "\022\005\021\016\017\050\004\060\005\062\015\064\013" +
    "\065\006\066\010\001\002\000\044\004\024\005\037\006" +
    "\025\007\033\010\034\011\026\012\023\013\041\015\030" +
    "\023\144\033\042\051\036\053\032\054\040\055\027\056" +
    "\031\057\035\001\002\000\022\005\021\016\017\050\004" +
    "\060\005\062\015\064\013\065\006\066\010\001\002\000" +
    "\044\004\024\005\037\006\025\007\033\010\034\011\026" +
    "\012\023\013\041\015\030\017\146\033\042\051\036\053" +
    "\032\054\040\055\027\056\031\057\035\001\002\000\004" +
    "\020\147\001\002\000\050\005\021\016\017\021\uffdf\025" +
    "\uffdf\026\uffdf\030\uffdf\032\uffdf\034\uffdf\035\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\050\004\060\005\062\015\063\uffdf\064" +
    "\013\065\006\066\010\001\002\000\050\005\021\016\017" +
    "\021\151\025\120\026\112\030\107\032\103\034\115\035" +
    "\114\043\077\044\116\045\106\050\004\060\005\062\015" +
    "\063\105\064\013\065\006\066\010\001\002\000\052\002" +
    "\uffdc\005\uffdc\016\uffdc\021\uffdc\025\uffdc\026\uffdc\030\uffdc" +
    "\032\uffdc\034\uffdc\035\uffdc\043\uffdc\044\uffdc\045\uffdc\050" +
    "\uffdc\060\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\001\002\000\050\005\021\016\017\021\uffdf\025\uffdf\026" +
    "\uffdf\030\uffdf\032\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\050\004\060\005\062\015\063\uffdf\064\013\065" +
    "\006\066\010\001\002\000\050\005\021\016\017\021\154" +
    "\025\120\026\112\030\107\032\103\034\115\035\114\043" +
    "\077\044\116\045\106\050\004\060\005\062\015\063\105" +
    "\064\013\065\006\066\010\001\002\000\004\036\155\001" +
    "\002\000\004\016\156\001\002\000\004\064\157\001\002" +
    "\000\004\017\160\001\002\000\004\020\161\001\002\000" +
    "\050\005\021\016\017\021\uffdf\025\uffdf\026\uffdf\030\uffdf" +
    "\032\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf\045\uffdf\050" +
    "\004\060\005\062\015\063\uffdf\064\013\065\006\066\010" +
    "\001\002\000\050\005\021\016\017\021\163\025\120\026" +
    "\112\030\107\032\103\034\115\035\114\043\077\044\116" +
    "\045\106\050\004\060\005\062\015\063\105\064\013\065" +
    "\006\066\010\001\002\000\052\002\uffde\005\uffde\016\uffde" +
    "\021\uffde\025\uffde\026\uffde\030\uffde\032\uffde\034\uffde\035" +
    "\uffde\043\uffde\044\uffde\045\uffde\050\uffde\060\uffde\062\uffde" +
    "\063\uffde\064\uffde\065\uffde\066\uffde\001\002\000\022\005" +
    "\021\016\017\050\004\060\005\062\015\064\013\065\006" +
    "\066\010\001\002\000\044\004\024\005\037\006\025\007" +
    "\033\010\034\011\026\012\023\013\041\015\030\017\166" +
    "\033\042\051\036\053\032\054\040\055\027\056\031\057" +
    "\035\001\002\000\004\020\167\001\002\000\050\005\021" +
    "\016\017\021\uffdf\025\uffdf\026\uffdf\030\uffdf\032\uffdf\034" +
    "\uffdf\035\uffdf\043\uffdf\044\uffdf\045\uffdf\050\004\060\005" +
    "\062\015\063\uffdf\064\013\065\006\066\010\001\002\000" +
    "\050\005\021\016\017\021\171\025\120\026\112\030\107" +
    "\032\103\034\115\035\114\043\077\044\116\045\106\050" +
    "\004\060\005\062\015\063\105\064\013\065\006\066\010" +
    "\001\002\000\054\002\uffd8\005\uffd8\016\uffd8\021\uffd8\025" +
    "\uffd8\026\uffd8\027\173\030\uffd8\032\uffd8\034\uffd8\035\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\050\uffd8\060\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\066\uffd8\001\002\000\054\002\uffd6" +
    "\005\uffd6\016\uffd6\021\uffd6\025\uffd6\026\uffd6\027\206\030" +
    "\uffd6\032\uffd6\034\uffd6\035\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\050\uffd6\060\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066" +
    "\uffd6\001\002\000\006\020\174\026\175\001\002\000\050" +
    "\005\021\016\017\021\uffdf\025\uffdf\026\uffdf\030\uffdf\032" +
    "\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf\045\uffdf\050\004" +
    "\060\005\062\015\063\uffdf\064\013\065\006\066\010\001" +
    "\002\000\004\016\176\001\002\000\022\005\021\016\017" +
    "\050\004\060\005\062\015\064\013\065\006\066\010\001" +
    "\002\000\044\004\024\005\037\006\025\007\033\010\034" +
    "\011\026\012\023\013\041\015\030\017\200\033\042\051" +
    "\036\053\032\054\040\055\027\056\031\057\035\001\002" +
    "\000\004\020\201\001\002\000\050\005\021\016\017\021" +
    "\uffdf\025\uffdf\026\uffdf\030\uffdf\032\uffdf\034\uffdf\035\uffdf" +
    "\043\uffdf\044\uffdf\045\uffdf\050\004\060\005\062\015\063" +
    "\uffdf\064\013\065\006\066\010\001\002\000\050\005\021" +
    "\016\017\021\203\025\120\026\112\030\107\032\103\034" +
    "\115\035\114\043\077\044\116\045\106\050\004\060\005" +
    "\062\015\063\105\064\013\065\006\066\010\001\002\000" +
    "\054\002\uffd9\005\uffd9\016\uffd9\021\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\032\uffd9\034\uffd9\035\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\050\uffd9\060\uffd9\062\uffd9\063\uffd9\064\uffd9" +
    "\065\uffd9\066\uffd9\001\002\000\050\005\021\016\017\021" +
    "\205\025\120\026\112\030\107\032\103\034\115\035\114" +
    "\043\077\044\116\045\106\050\004\060\005\062\015\063" +
    "\105\064\013\065\006\066\010\001\002\000\052\002\uffd7" +
    "\005\uffd7\016\uffd7\021\uffd7\025\uffd7\026\uffd7\030\uffd7\032" +
    "\uffd7\034\uffd7\035\uffd7\043\uffd7\044\uffd7\045\uffd7\050\uffd7" +
    "\060\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\001" +
    "\002\000\006\020\207\026\210\001\002\000\050\005\021" +
    "\016\017\021\uffdf\025\uffdf\026\uffdf\030\uffdf\032\uffdf\034" +
    "\uffdf\035\uffdf\043\uffdf\044\uffdf\045\uffdf\050\004\060\005" +
    "\062\015\063\uffdf\064\013\065\006\066\010\001\002\000" +
    "\004\016\211\001\002\000\022\005\021\016\017\050\004" +
    "\060\005\062\015\064\013\065\006\066\010\001\002\000" +
    "\044\004\024\005\037\006\025\007\033\010\034\011\026" +
    "\012\023\013\041\015\030\017\213\033\042\051\036\053" +
    "\032\054\040\055\027\056\031\057\035\001\002\000\004" +
    "\020\214\001\002\000\050\005\021\016\017\021\uffdf\025" +
    "\uffdf\026\uffdf\030\uffdf\032\uffdf\034\uffdf\035\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\050\004\060\005\062\015\063\uffdf\064" +
    "\013\065\006\066\010\001\002\000\050\005\021\016\017" +
    "\021\216\025\120\026\112\030\107\032\103\034\115\035" +
    "\114\043\077\044\116\045\106\050\004\060\005\062\015" +
    "\063\105\064\013\065\006\066\010\001\002\000\054\002" +
    "\uffda\005\uffda\016\uffda\021\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\032\uffda\034\uffda\035\uffda\043\uffda\044\uffda\045" +
    "\uffda\050\uffda\060\uffda\062\uffda\063\uffda\064\uffda\065\uffda" +
    "\066\uffda\001\002\000\050\005\021\016\017\021\220\025" +
    "\120\026\112\030\107\032\103\034\115\035\114\043\077" +
    "\044\116\045\106\050\004\060\005\062\015\063\105\064" +
    "\013\065\006\066\010\001\002\000\052\002\uffd5\005\uffd5" +
    "\016\uffd5\021\uffd5\025\uffd5\026\uffd5\030\uffd5\032\uffd5\034" +
    "\uffd5\035\uffd5\043\uffd5\044\uffd5\045\uffd5\050\uffd5\060\uffd5" +
    "\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\001\002\000" +
    "\022\005\021\016\017\050\004\060\005\062\015\064\013" +
    "\065\006\066\010\001\002\000\044\004\024\005\037\006" +
    "\025\007\033\010\034\011\026\012\023\013\041\015\030" +
    "\017\223\033\042\051\036\053\032\054\040\055\027\056" +
    "\031\057\035\001\002\000\004\020\224\001\002\000\004" +
    "\031\226\001\002\000\006\021\234\031\235\001\002\000" +
    "\022\005\021\016\017\050\004\060\005\062\015\064\013" +
    "\065\006\066\010\001\002\000\044\004\024\005\037\006" +
    "\025\007\033\010\034\011\026\012\023\013\041\015\030" +
    "\023\230\033\042\051\036\053\032\054\040\055\027\056" +
    "\031\057\035\001\002\000\004\020\231\001\002\000\050" +
    "\005\021\016\017\021\uffdf\025\uffdf\026\uffdf\030\uffdf\032" +
    "\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf\045\uffdf\050\004" +
    "\060\005\062\015\063\uffdf\064\013\065\006\066\010\001" +
    "\002\000\050\005\021\016\017\021\233\025\120\026\112" +
    "\030\107\032\103\034\115\035\114\043\077\044\116\045" +
    "\106\050\004\060\005\062\015\063\105\064\013\065\006" +
    "\066\010\001\002\000\006\021\uffd3\031\uffd3\001\002\000" +
    "\052\002\uffd2\005\uffd2\016\uffd2\021\uffd2\025\uffd2\026\uffd2" +
    "\030\uffd2\032\uffd2\034\uffd2\035\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\050\uffd2\060\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2" +
    "\066\uffd2\001\002\000\022\005\021\016\017\050\004\060" +
    "\005\062\015\064\013\065\006\066\010\001\002\000\044" +
    "\004\024\005\037\006\025\007\033\010\034\011\026\012" +
    "\023\013\041\015\030\023\237\033\042\051\036\053\032" +
    "\054\040\055\027\056\031\057\035\001\002\000\004\020" +
    "\240\001\002\000\050\005\021\016\017\021\uffdf\025\uffdf" +
    "\026\uffdf\030\uffdf\032\uffdf\034\uffdf\035\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\050\004\060\005\062\015\063\uffdf\064\013" +
    "\065\006\066\010\001\002\000\050\005\021\016\017\021" +
    "\242\025\120\026\112\030\107\032\103\034\115\035\114" +
    "\043\077\044\116\045\106\050\004\060\005\062\015\063" +
    "\105\064\013\065\006\066\010\001\002\000\006\021\uffd4" +
    "\031\uffd4\001\002\000\004\016\244\001\002\000\006\017" +
    "\245\064\246\001\002\000\006\020\302\046\303\001\002" +
    "\000\006\017\247\024\070\001\002\000\006\020\266\046" +
    "\267\001\002\000\004\017\251\001\002\000\006\020\252" +
    "\046\253\001\002\000\050\005\021\016\017\021\uffdf\025" +
    "\uffdf\026\uffdf\030\uffdf\032\uffdf\034\uffdf\035\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\050\004\060\005\062\015\063\uffdf\064" +
    "\013\065\006\066\010\001\002\000\006\043\254\047\255" +
    "\001\002\000\004\020\261\001\002\000\004\020\256\001" +
    "\002\000\050\005\021\016\017\021\uffdf\025\uffdf\026\uffdf" +
    "\030\uffdf\032\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\050\004\060\005\062\015\063\uffdf\064\013\065\006" +
    "\066\010\001\002\000\050\005\021\016\017\021\260\025" +
    "\120\026\112\030\107\032\103\034\115\035\114\043\077" +
    "\044\116\045\106\050\004\060\005\062\015\063\105\064" +
    "\013\065\006\066\010\001\002\000\120\002\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\030\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\043\uffe5\044\uffe5\045\uffe5\050\uffe5\051\uffe5" +
    "\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\062" +
    "\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\001\002\000\050" +
    "\005\021\016\017\021\uffdf\025\uffdf\026\uffdf\030\uffdf\032" +
    "\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf\045\uffdf\050\004" +
    "\060\005\062\015\063\uffdf\064\013\065\006\066\010\001" +
    "\002\000\050\005\021\016\017\021\263\025\120\026\112" +
    "\030\107\032\103\034\115\035\114\043\077\044\116\045" +
    "\106\050\004\060\005\062\015\063\105\064\013\065\006" +
    "\066\010\001\002\000\120\002\uffe8\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\030\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\050\uffe8\051\uffe8\053\uffe8\054" +
    "\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\062\uffe8\063\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\001\002\000\050\005\021\016" +
    "\017\021\265\025\120\026\112\030\107\032\103\034\115" +
    "\035\114\043\077\044\116\045\106\050\004\060\005\062" +
    "\015\063\105\064\013\065\006\066\010\001\002\000\120" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\050\uffeb\051\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb" +
    "\001\002\000\050\005\021\016\017\021\uffdf\025\uffdf\026" +
    "\uffdf\030\uffdf\032\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\050\004\060\005\062\015\063\uffdf\064\013\065" +
    "\006\066\010\001\002\000\006\043\270\047\271\001\002" +
    "\000\004\020\275\001\002\000\004\020\272\001\002\000" +
    "\050\005\021\016\017\021\uffdf\025\uffdf\026\uffdf\030\uffdf" +
    "\032\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf\045\uffdf\050" +
    "\004\060\005\062\015\063\uffdf\064\013\065\006\066\010" +
    "\001\002\000\050\005\021\016\017\021\274\025\120\026" +
    "\112\030\107\032\103\034\115\035\114\043\077\044\116" +
    "\045\106\050\004\060\005\062\015\063\105\064\013\065" +
    "\006\066\010\001\002\000\120\002\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\030\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\050\uffe6\051\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\001\002\000\050\005\021" +
    "\016\017\021\uffdf\025\uffdf\026\uffdf\030\uffdf\032\uffdf\034" +
    "\uffdf\035\uffdf\043\uffdf\044\uffdf\045\uffdf\050\004\060\005" +
    "\062\015\063\uffdf\064\013\065\006\066\010\001\002\000" +
    "\050\005\021\016\017\021\277\025\120\026\112\030\107" +
    "\032\103\034\115\035\114\043\077\044\116\045\106\050" +
    "\004\060\005\062\015\063\105\064\013\065\006\066\010" +
    "\001\002\000\120\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\043\uffe9" +
    "\044\uffe9\045\uffe9\050\uffe9\051\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\057\uffe9\060\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\065\uffe9\066\uffe9\001\002\000\050\005\021\016\017\021" +
    "\301\025\120\026\112\030\107\032\103\034\115\035\114" +
    "\043\077\044\116\045\106\050\004\060\005\062\015\063" +
    "\105\064\013\065\006\066\010\001\002\000\120\002\uffec" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\015\uffec\016\uffec\017\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\030\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\043\uffec\044\uffec\045\uffec\050\uffec" +
    "\051\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060" +
    "\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\001\002" +
    "\000\050\005\021\016\017\021\uffdf\025\uffdf\026\uffdf\030" +
    "\uffdf\032\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\050\004\060\005\062\015\063\uffdf\064\013\065\006\066" +
    "\010\001\002\000\006\043\304\047\305\001\002\000\004" +
    "\020\311\001\002\000\004\020\306\001\002\000\050\005" +
    "\021\016\017\021\uffdf\025\uffdf\026\uffdf\030\uffdf\032\uffdf" +
    "\034\uffdf\035\uffdf\043\uffdf\044\uffdf\045\uffdf\050\004\060" +
    "\005\062\015\063\uffdf\064\013\065\006\066\010\001\002" +
    "\000\050\005\021\016\017\021\310\025\120\026\112\030" +
    "\107\032\103\034\115\035\114\043\077\044\116\045\106" +
    "\050\004\060\005\062\015\063\105\064\013\065\006\066" +
    "\010\001\002\000\120\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\050\uffe7\051\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\060\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\065\uffe7\066\uffe7\001\002\000\050\005\021\016\017" +
    "\021\uffdf\025\uffdf\026\uffdf\030\uffdf\032\uffdf\034\uffdf\035" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\050\004\060\005\062\015" +
    "\063\uffdf\064\013\065\006\066\010\001\002\000\050\005" +
    "\021\016\017\021\313\025\120\026\112\030\107\032\103" +
    "\034\115\035\114\043\077\044\116\045\106\050\004\060" +
    "\005\062\015\063\105\064\013\065\006\066\010\001\002" +
    "\000\120\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\013\uffea\015\uffea\016\uffea\017\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\030" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\043\uffea\044\uffea" +
    "\045\uffea\050\uffea\051\uffea\053\uffea\054\uffea\055\uffea\056" +
    "\uffea\057\uffea\060\uffea\062\uffea\063\uffea\064\uffea\065\uffea" +
    "\066\uffea\001\002\000\050\005\021\016\017\021\315\025" +
    "\120\026\112\030\107\032\103\034\115\035\114\043\077" +
    "\044\116\045\106\050\004\060\005\062\015\063\105\064" +
    "\013\065\006\066\010\001\002\000\120\002\uffed\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\015\uffed\016\uffed\017\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\030\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\043\uffed\044\uffed\045\uffed\050\uffed\051\uffed" +
    "\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\062" +
    "\uffed\063\uffed\064\uffed\065\uffed\066\uffed\001\002\000\110" +
    "\002\ufff5\004\024\005\ufff5\006\025\007\033\010\034\011" +
    "\026\012\023\013\041\015\030\016\ufff5\021\ufff5\025\ufff5" +
    "\026\ufff5\030\ufff5\032\ufff5\033\042\034\ufff5\035\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\050\ufff5\051\036\053\032\054\040" +
    "\055\027\056\031\057\035\060\ufff5\062\ufff5\063\ufff5\064" +
    "\ufff5\065\ufff5\066\ufff5\001\002\000\022\005\021\016\017" +
    "\050\004\060\005\062\015\064\013\065\006\066\010\001" +
    "\002\000\044\004\024\005\037\006\025\007\033\010\034" +
    "\011\026\012\023\013\041\015\030\017\321\033\042\051" +
    "\036\053\032\054\040\055\027\056\031\057\035\001\002" +
    "\000\004\020\322\001\002\000\050\005\021\016\017\021" +
    "\uffdf\025\uffdf\026\uffdf\030\uffdf\032\uffdf\034\uffdf\035\uffdf" +
    "\043\uffdf\044\uffdf\045\uffdf\050\004\060\005\062\015\063" +
    "\uffdf\064\013\065\006\066\010\001\002\000\050\005\021" +
    "\016\017\021\324\025\120\026\112\030\107\032\103\034" +
    "\115\035\114\043\077\044\116\045\106\050\004\060\005" +
    "\062\015\063\105\064\013\065\006\066\010\001\002\000" +
    "\052\002\uffdb\005\uffdb\016\uffdb\021\uffdb\025\uffdb\026\uffdb" +
    "\030\uffdb\032\uffdb\034\uffdb\035\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\050\uffdb\060\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\066\uffdb\001\002\000\010\020\327\037\330\041\326\001" +
    "\002\000\004\042\346\001\002\000\050\005\021\016\017" +
    "\021\uffdf\025\uffdf\026\uffdf\030\uffdf\032\uffdf\034\uffdf\035" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\050\004\060\005\062\015" +
    "\063\uffdf\064\013\065\006\066\010\001\002\000\004\040" +
    "\331\001\002\000\004\064\332\001\002\000\006\020\334" +
    "\041\333\001\002\000\004\042\337\001\002\000\050\005" +
    "\021\016\017\021\uffdf\025\uffdf\026\uffdf\030\uffdf\032\uffdf" +
    "\034\uffdf\035\uffdf\043\uffdf\044\uffdf\045\uffdf\050\004\060" +
    "\005\062\015\063\uffdf\064\013\065\006\066\010\001\002" +
    "\000\050\005\021\016\017\021\336\025\120\026\112\030" +
    "\107\032\103\034\115\035\114\043\077\044\116\045\106" +
    "\050\004\060\005\062\015\063\105\064\013\065\006\066" +
    "\010\001\002\000\052\002\ufff1\005\ufff1\016\ufff1\021\ufff1" +
    "\025\ufff1\026\ufff1\030\ufff1\032\ufff1\034\ufff1\035\ufff1\043" +
    "\ufff1\044\ufff1\045\ufff1\050\ufff1\060\ufff1\062\ufff1\063\ufff1" +
    "\064\ufff1\065\ufff1\066\ufff1\001\002\000\004\064\340\001" +
    "\002\000\004\020\341\001\002\000\050\005\021\016\017" +
    "\021\uffdf\025\uffdf\026\uffdf\030\uffdf\032\uffdf\034\uffdf\035" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\050\004\060\005\062\015" +
    "\063\uffdf\064\013\065\006\066\010\001\002\000\050\005" +
    "\021\016\017\021\343\025\120\026\112\030\107\032\103" +
    "\034\115\035\114\043\077\044\116\045\106\050\004\060" +
    "\005\062\015\063\105\064\013\065\006\066\010\001\002" +
    "\000\052\002\uffef\005\uffef\016\uffef\021\uffef\025\uffef\026" +
    "\uffef\030\uffef\032\uffef\034\uffef\035\uffef\043\uffef\044\uffef" +
    "\045\uffef\050\uffef\060\uffef\062\uffef\063\uffef\064\uffef\065" +
    "\uffef\066\uffef\001\002\000\050\005\021\016\017\021\345" +
    "\025\120\026\112\030\107\032\103\034\115\035\114\043" +
    "\077\044\116\045\106\050\004\060\005\062\015\063\105" +
    "\064\013\065\006\066\010\001\002\000\052\002\ufff2\005" +
    "\ufff2\016\ufff2\021\ufff2\025\ufff2\026\ufff2\030\ufff2\032\ufff2" +
    "\034\ufff2\035\ufff2\043\ufff2\044\ufff2\045\ufff2\050\ufff2\060" +
    "\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\001\002" +
    "\000\004\064\347\001\002\000\004\020\350\001\002\000" +
    "\050\005\021\016\017\021\uffdf\025\uffdf\026\uffdf\030\uffdf" +
    "\032\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf\045\uffdf\050" +
    "\004\060\005\062\015\063\uffdf\064\013\065\006\066\010" +
    "\001\002\000\050\005\021\016\017\021\352\025\120\026" +
    "\112\030\107\032\103\034\115\035\114\043\077\044\116" +
    "\045\106\050\004\060\005\062\015\063\105\064\013\065" +
    "\006\066\010\001\002\000\052\002\ufff0\005\ufff0\016\ufff0" +
    "\021\ufff0\025\ufff0\026\ufff0\030\ufff0\032\ufff0\034\ufff0\035" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\050\ufff0\060\ufff0\062\ufff0" +
    "\063\ufff0\064\ufff0\065\ufff0\066\ufff0\001\002\000\004\020" +
    "\354\001\002\000\050\005\021\016\017\021\uffdf\025\uffdf" +
    "\026\uffdf\030\uffdf\032\uffdf\034\uffdf\035\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\050\004\060\005\062\015\063\uffdf\064\013" +
    "\065\006\066\010\001\002\000\050\005\021\016\017\021" +
    "\356\025\120\026\112\030\107\032\103\034\115\035\114" +
    "\043\077\044\116\045\106\050\004\060\005\062\015\063" +
    "\105\064\013\065\006\066\010\001\002\000\120\002\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\043\uffe2\044\uffe2\045\uffe2\050\uffe2" +
    "\051\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\001\002" +
    "\000\006\017\uffe0\024\070\001\002\000\004\017\uffe1\001" +
    "\002\000\004\020\362\001\002\000\050\005\021\016\017" +
    "\021\uffdf\025\uffdf\026\uffdf\030\uffdf\032\uffdf\034\uffdf\035" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\050\004\060\005\062\015" +
    "\063\uffdf\064\013\065\006\066\010\001\002\000\050\005" +
    "\021\016\017\021\364\025\120\026\112\030\107\032\103" +
    "\034\115\035\114\043\077\044\116\045\106\050\004\060" +
    "\005\062\015\063\105\064\013\065\006\066\010\001\002" +
    "\000\120\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\043\uffe4\044\uffe4" +
    "\045\uffe4\050\uffe4\051\uffe4\053\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\001\002\000\024\005\021\016\017\045\106\050" +
    "\004\060\005\062\015\064\013\065\006\066\010\001\002" +
    "\000\120\002\uffc8\004\024\005\037\006\025\007\033\010" +
    "\034\011\026\012\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\030" +
    "\uffc8\032\uffc8\033\042\034\uffc8\035\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\050\uffc8\051\036\053\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\001\002\000\120\002\uffc7\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\050\uffc7\051\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\062\uffc7\063\uffc7" +
    "\064\uffc7\065\uffc7\066\uffc7\001\002\000\004\002\001\001" +
    "\002\000\042\004\024\005\037\006\025\007\033\010\034" +
    "\011\026\012\023\013\041\015\030\033\042\051\u0105\053" +
    "\032\054\040\055\027\056\031\057\035\001\002\000\046" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\013\uffb5\015\uffb5\016\373\033\uffb5\051\uffb5\052\365" +
    "\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\001\002\000" +
    "\006\017\uffdf\064\375\001\002\000\004\017\u0104\001\002" +
    "\000\004\023\u0102\001\002\000\006\017\uffb3\024\u0100\001" +
    "\002\000\004\017\uffb2\001\002\000\006\017\uffdf\064\375" +
    "\001\002\000\004\017\uffb4\001\002\000\022\005\021\016" +
    "\017\050\004\060\005\062\015\064\013\065\006\066\010" +
    "\001\002\000\046\004\024\005\037\006\025\007\033\010" +
    "\034\011\026\012\023\013\041\015\030\017\uffb1\024\uffb1" +
    "\033\042\051\036\053\032\054\040\055\027\056\031\057" +
    "\035\001\002\000\120\002\uffc6\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6\016" +
    "\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\030\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\050\uffc6\051\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\uffc6\062\uffc6\063\uffc6\064" +
    "\uffc6\065\uffc6\066\uffc6\001\002\000\022\005\021\016\017" +
    "\050\004\060\005\062\015\064\u0106\065\006\066\010\001" +
    "\002\000\046\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\012\uffb5\013\uffb5\015\uffb5\016\u0107\033\uffb5\051" +
    "\uffb5\052\365\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\001\002\000\006\017\u0109\064\375\001\002\000\004\017" +
    "\u010a\001\002\000\120\002\uffc4\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\030\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\050\uffc4\051\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\060\uffc4\062\uffc4\063\uffc4\064" +
    "\uffc4\065\uffc4\066\uffc4\001\002\000\120\002\uffc5\004\uffc5" +
    "\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\030\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\043\uffc5\044\uffc5\045\uffc5\050\uffc5\051\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\016\002\011\003\006\004\013\023\017\024" +
    "\015\025\010\001\001\000\002\001\001\000\010\003\370" +
    "\024\015\025\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\110\005\120\006\107\007" +
    "\121\010\103\011\122\012\116\013\101\014\100\015\112" +
    "\024\015\025\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\062\024\015\025\010\001\001\000\002" +
    "\001\001\000\010\003\021\024\015\025\010\001\001\000" +
    "\002\001\001\000\010\003\061\024\015\025\010\001\001" +
    "\000\010\003\060\024\015\025\010\001\001\000\010\003" +
    "\057\024\015\025\010\001\001\000\010\003\056\024\015" +
    "\025\010\001\001\000\010\003\055\024\015\025\010\001" +
    "\001\000\010\003\054\024\015\025\010\001\001\000\010" +
    "\003\053\024\015\025\010\001\001\000\010\003\052\024" +
    "\015\025\010\001\001\000\010\003\051\024\015\025\010" +
    "\001\001\000\010\003\050\024\015\025\010\001\001\000" +
    "\010\003\047\024\015\025\010\001\001\000\010\003\046" +
    "\024\015\025\010\001\001\000\010\003\045\024\015\025" +
    "\010\001\001\000\010\003\044\024\015\025\010\001\001" +
    "\000\010\003\043\024\015\025\010\001\001\000\010\003" +
    "\042\024\015\025\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\006" +
    "\004\075\023\017\024\015\025\010\001\001\000\032\003" +
    "\110\005\120\006\107\007\121\010\103\011\122\012\116" +
    "\013\101\014\100\015\112\024\015\025\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\315\024\015\025\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\124\024\015\025\010\001\001\000\002\001\001\000" +
    "\010\003\126\024\015\025\010\001\001\000\002\001\001" +
    "\000\010\003\130\024\015\025\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\006\004\133\023\017" +
    "\024\015\025\010\001\001\000\032\003\110\005\120\006" +
    "\107\007\121\010\103\011\122\012\116\013\101\014\100" +
    "\015\112\024\015\025\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\006\004\137\023\017\024\015" +
    "\025\010\001\001\000\032\003\110\005\120\006\107\007" +
    "\121\010\103\011\122\012\116\013\101\014\100\015\112" +
    "\024\015\025\010\001\001\000\002\001\001\000\010\003" +
    "\142\024\015\025\010\001\001\000\002\001\001\000\010" +
    "\003\144\024\015\025\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\006\004\147\023\017\024\015" +
    "\025\010\001\001\000\032\003\110\005\120\006\107\007" +
    "\121\010\103\011\122\012\116\013\101\014\100\015\112" +
    "\024\015\025\010\001\001\000\002\001\001\000\014\003" +
    "\006\004\152\023\017\024\015\025\010\001\001\000\032" +
    "\003\110\005\120\006\107\007\121\010\103\011\122\012" +
    "\116\013\101\014\100\015\112\024\015\025\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\006\004\161" +
    "\023\017\024\015\025\010\001\001\000\032\003\110\005" +
    "\120\006\107\007\121\010\103\011\122\012\116\013\101" +
    "\014\100\015\112\024\015\025\010\001\001\000\002\001" +
    "\001\000\010\003\164\024\015\025\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\006\004\167\023" +
    "\017\024\015\025\010\001\001\000\032\003\110\005\120" +
    "\006\107\007\121\010\103\011\122\012\116\013\101\014" +
    "\100\015\112\024\015\025\010\001\001\000\004\016\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\006\004\203\023\017\024\015\025\010\001\001\000\002" +
    "\001\001\000\010\003\176\024\015\025\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\006\004\201" +
    "\023\017\024\015\025\010\001\001\000\032\003\110\005" +
    "\120\006\107\007\121\010\103\011\122\012\116\013\101" +
    "\014\100\015\112\024\015\025\010\001\001\000\002\001" +
    "\001\000\032\003\110\005\120\006\107\007\121\010\103" +
    "\011\122\012\116\013\101\014\100\015\112\024\015\025" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\006\004\216\023\017\024\015\025\010\001\001\000" +
    "\002\001\001\000\010\003\211\024\015\025\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\006\004" +
    "\214\023\017\024\015\025\010\001\001\000\032\003\110" +
    "\005\120\006\107\007\121\010\103\011\122\012\116\013" +
    "\101\014\100\015\112\024\015\025\010\001\001\000\002" +
    "\001\001\000\032\003\110\005\120\006\107\007\121\010" +
    "\103\011\122\012\116\013\101\014\100\015\112\024\015" +
    "\025\010\001\001\000\002\001\001\000\010\003\221\024" +
    "\015\025\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\224\001\001\000\002\001\001\000\010\003" +
    "\226\024\015\025\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\006\004\231\023\017\024\015\025" +
    "\010\001\001\000\032\003\110\005\120\006\107\007\121" +
    "\010\103\011\122\012\116\013\101\014\100\015\112\024" +
    "\015\025\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\235\024\015\025\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\006\004\240\023\017" +
    "\024\015\025\010\001\001\000\032\003\110\005\120\006" +
    "\107\007\121\010\103\011\122\012\116\013\101\014\100" +
    "\015\112\024\015\025\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\006\004\263\023\017\024\015" +
    "\025\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\006\004\256\023\017\024\015" +
    "\025\010\001\001\000\032\003\110\005\120\006\107\007" +
    "\121\010\103\011\122\012\116\013\101\014\100\015\112" +
    "\024\015\025\010\001\001\000\002\001\001\000\014\003" +
    "\006\004\261\023\017\024\015\025\010\001\001\000\032" +
    "\003\110\005\120\006\107\007\121\010\103\011\122\012" +
    "\116\013\101\014\100\015\112\024\015\025\010\001\001" +
    "\000\002\001\001\000\032\003\110\005\120\006\107\007" +
    "\121\010\103\011\122\012\116\013\101\014\100\015\112" +
    "\024\015\025\010\001\001\000\002\001\001\000\014\003" +
    "\006\004\277\023\017\024\015\025\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\006\004\272\023\017\024\015\025\010\001\001\000\032" +
    "\003\110\005\120\006\107\007\121\010\103\011\122\012" +
    "\116\013\101\014\100\015\112\024\015\025\010\001\001" +
    "\000\002\001\001\000\014\003\006\004\275\023\017\024" +
    "\015\025\010\001\001\000\032\003\110\005\120\006\107" +
    "\007\121\010\103\011\122\012\116\013\101\014\100\015" +
    "\112\024\015\025\010\001\001\000\002\001\001\000\032" +
    "\003\110\005\120\006\107\007\121\010\103\011\122\012" +
    "\116\013\101\014\100\015\112\024\015\025\010\001\001" +
    "\000\002\001\001\000\014\003\006\004\313\023\017\024" +
    "\015\025\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\006\004\306\023\017\024" +
    "\015\025\010\001\001\000\032\003\110\005\120\006\107" +
    "\007\121\010\103\011\122\012\116\013\101\014\100\015" +
    "\112\024\015\025\010\001\001\000\002\001\001\000\014" +
    "\003\006\004\311\023\017\024\015\025\010\001\001\000" +
    "\032\003\110\005\120\006\107\007\121\010\103\011\122" +
    "\012\116\013\101\014\100\015\112\024\015\025\010\001" +
    "\001\000\002\001\001\000\032\003\110\005\120\006\107" +
    "\007\121\010\103\011\122\012\116\013\101\014\100\015" +
    "\112\024\015\025\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\317\024\015\025\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\006\004\322" +
    "\023\017\024\015\025\010\001\001\000\032\003\110\005" +
    "\120\006\107\007\121\010\103\011\122\012\116\013\101" +
    "\014\100\015\112\024\015\025\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\006" +
    "\004\343\023\017\024\015\025\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\006\004\334\023\017\024\015\025\010\001" +
    "\001\000\032\003\110\005\120\006\107\007\121\010\103" +
    "\011\122\012\116\013\101\014\100\015\112\024\015\025" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\006\004\341\023\017\024\015\025" +
    "\010\001\001\000\032\003\110\005\120\006\107\007\121" +
    "\010\103\011\122\012\116\013\101\014\100\015\112\024" +
    "\015\025\010\001\001\000\002\001\001\000\032\003\110" +
    "\005\120\006\107\007\121\010\103\011\122\012\116\013" +
    "\101\014\100\015\112\024\015\025\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\006\004\350\023\017\024\015\025\010\001\001\000\032" +
    "\003\110\005\120\006\107\007\121\010\103\011\122\012" +
    "\116\013\101\014\100\015\112\024\015\025\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\006\004" +
    "\354\023\017\024\015\025\010\001\001\000\032\003\110" +
    "\005\120\006\107\007\121\010\103\011\122\012\116\013" +
    "\101\014\100\015\112\024\015\025\010\001\001\000\002" +
    "\001\001\000\004\020\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\006\004\362\023\017\024\015" +
    "\025\010\001\001\000\032\003\110\005\120\006\107\007" +
    "\121\010\103\011\122\012\116\013\101\014\100\015\112" +
    "\024\015\025\010\001\001\000\002\001\001\000\012\003" +
    "\365\013\366\024\015\025\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\373\022\375\023\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\u0100\022\375\023\376\001\001" +
    "\000\002\001\001\000\010\003\u0102\024\015\025\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\046" +
    "\024\015\025\010\001\001\000\002\001\001\000\010\021" +
    "\u0107\022\375\023\376\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EogenParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EogenParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EogenParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol token = this.lexer.next_token(); System.out.println("sym : " + token.sym + ", value : " + token.value); return token; 
    }


    EogenLexer lexer;
    EogenParser(EogenLexer lexer) { super(lexer); this.lexer = lexer; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$EogenParser$actions {
  private final EogenParser parser;

  /** Constructor */
  CUP$EogenParser$actions(EogenParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$EogenParser$do_action_part00000000(
    int                        CUP$EogenParser$act_num,
    java_cup.runtime.lr_parser CUP$EogenParser$parser,
    java.util.Stack            CUP$EogenParser$stack,
    int                        CUP$EogenParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EogenParser$result;

      /* select the action based on the action number */
      switch (CUP$EogenParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= root EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		RESULT = start_val;
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EogenParser$parser.done_parsing();
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // root ::= exp_list 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                  System.out.println("Middle code : \n" + JsonHelper.toJson(el));
                  RESULT = el;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("root",0, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp_list ::= exp_list exp 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)e1);
                  RESULT = r;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp_list ::= exp_list if_exp 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object ie = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)ie);
                  RESULT = r;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp_list ::= exp_list switch_exp 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)se);
                  RESULT = r;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp_list ::= exp_list for_exp 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object fe = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)fe);
                  RESULT = r;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp_list ::= exp_list foreach_exp 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		int feeleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int feeright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object fee = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)fee);
                  RESULT = r;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp_list ::= exp_list while_exp 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		int weleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int weright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object we = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)we);
                  RESULT = r;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp_list ::= exp_list try_exp 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object te = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)te);
                  RESULT = r;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp_list ::= exp_list function_exp 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object fe = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)fe);
                  RESULT = r;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp_list ::= exp_list class_exp 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)ce);
                  RESULT = r;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp_list ::= exp_list behaviour_exp 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)be);
                  RESULT = r;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp_list ::= exp_list RETURN exp 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  Codes.Return ret = new Codes.Return();
                  ret.setValue((Codes.Code)e1);
                  r.add(ret);
                  RESULT = r;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp_list ::= exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                  List<Codes.Code> r = new ArrayList<Codes.Code>();
                  r.add((Codes.Code)e1);
                  RESULT = r;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp_list ::= epsilon 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                  RESULT = new ArrayList<Codes.Code>();
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_exp ::= CLASS IDENTIFIER LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).value;
		int el1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                  Codes.Class c = new Codes.Class();
                  c.setName((String)i);
                  c.setBasedOn(null);
                  c.setBehaveLike(null);
                  c.setCodes((List<Codes.Code>)el1);
                  RESULT = c;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("class_exp",11, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // class_exp ::= CLASS IDENTIFIER BASED ON IDENTIFIER LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).value;
		int el1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                  Codes.Class c = new Codes.Class();
                  c.setName((String)i);
                  c.setBasedOn((String)i2);
                  c.setBehaveLike(null);
                  c.setCodes((List<Codes.Code>)el1);
                  RESULT = c;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("class_exp",11, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_exp ::= CLASS IDENTIFIER BEHAVES LIKE IDENTIFIER LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).value;
		int el1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                  Codes.Class c = new Codes.Class();
                  c.setName((String)i);
                  c.setBasedOn(null);
                  c.setBehaveLike((String)i2);
                  c.setCodes((List<Codes.Code>)el1);
                  RESULT = c;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("class_exp",11, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // class_exp ::= CLASS IDENTIFIER BASED ON IDENTIFIER BEHAVES LIKE IDENTIFIER LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-9)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).value;
		int el1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                  Codes.Class c = new Codes.Class();
                  c.setName((String)i);
                  c.setBasedOn((String)i2);
                  c.setBehaveLike((String)i3);
                  c.setCodes((List<Codes.Code>)el1);
                  RESULT = c;
              
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("class_exp",11, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-10)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // behaviour_exp ::= BEHAVIOUR IDENTIFIER LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).value;
		int el1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Behaviour b = new Codes.Behaviour();
                     b.setName((String)i);
                     b.setCodes((List<Codes.Code>)el1);
                     RESULT = b;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("behaviour_exp",10, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function_exp ::= FUNCTION IDENTIFIER LPAREN RPAREN LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Function func = new Codes.Function();
                     func.setName((String)i);
                     func.setLevel(Codes.FunctionLevel.InstanceLevel);
                     List<Codes.Identifier> ids = new ArrayList<Codes.Identifier>();
                     func.setParams(ids);
                     func.setCodes((List<Codes.Code>)el);
                     RESULT = func;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("function_exp",9, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_exp ::= FUNCTION IDENTIFIER LPAREN IDENTIFIER RPAREN LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Function func = new Codes.Function();
                     func.setName((String)i1);
                     func.setLevel(Codes.FunctionLevel.InstanceLevel);
                     List<Codes.Identifier> ids = new ArrayList<Codes.Identifier>();
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName((String)i2);
                     ids.add(id);
                     func.setParams(ids);
                     func.setCodes((List<Codes.Code>)el);
                     RESULT = func;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("function_exp",9, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function_exp ::= FUNCTION IDENTIFIER LPAREN IDENTIFIER arg_list RPAREN LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).value;
		int al1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).left;
		int al1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).right;
		Object al1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Function func = new Codes.Function();
                     func.setName((String)i1);
                     func.setLevel(Codes.FunctionLevel.InstanceLevel);
                     List<Codes.Identifier> ids = new ArrayList<Codes.Identifier>();
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName((String)i2);
                     ids.add(id);
                     ids.addAll((List<Codes.Identifier>)al1);
                     func.setParams(ids);
                     func.setCodes((List<Codes.Code>)el);
                     RESULT = func;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("function_exp",9, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_exp ::= FUNCTION IDENTIFIER LPAREN RPAREN OF CLASS LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Function func = new Codes.Function();
                     func.setName((String)i);
                     func.setLevel(Codes.FunctionLevel.ClassLevel);
                     List<Codes.Identifier> ids = new ArrayList<Codes.Identifier>();
                     func.setParams(ids);
                     func.setCodes((List<Codes.Code>)el);
                     RESULT = func;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("function_exp",9, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function_exp ::= FUNCTION IDENTIFIER LPAREN IDENTIFIER RPAREN OF CLASS LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Function func = new Codes.Function();
                     func.setName((String)i1);
                     func.setLevel(Codes.FunctionLevel.ClassLevel);
                     List<Codes.Identifier> ids = new ArrayList<Codes.Identifier>();
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName((String)i2);
                     ids.add(id);
                     func.setParams(ids);
                     func.setCodes((List<Codes.Code>)el);
                     RESULT = func;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("function_exp",9, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-9)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // function_exp ::= FUNCTION IDENTIFIER LPAREN IDENTIFIER arg_list RPAREN OF CLASS LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-9)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-9)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-9)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)).value;
		int al1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).left;
		int al1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).right;
		Object al1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Function func = new Codes.Function();
                     func.setName((String)i1);
                     func.setLevel(Codes.FunctionLevel.ClassLevel);
                     List<Codes.Identifier> ids = new ArrayList<Codes.Identifier>();
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName((String)i2);
                     ids.add(id);
                     ids.addAll((List<Codes.Identifier>)al1);
                     func.setParams(ids);
                     func.setCodes((List<Codes.Code>)el);
                     RESULT = func;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("function_exp",9, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-10)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function_exp ::= FUNCTION IDENTIFIER LPAREN RPAREN OF INSTANCE LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Function func = new Codes.Function();
                     func.setName((String)i1);
                     func.setLevel(Codes.FunctionLevel.InstanceLevel);
                     List<Codes.Identifier> ids = new ArrayList<Codes.Identifier>();
                     func.setParams(ids);
                     func.setCodes((List<Codes.Code>)el);
                     RESULT = func;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("function_exp",9, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function_exp ::= FUNCTION IDENTIFIER LPAREN IDENTIFIER RPAREN OF INSTANCE LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Function func = new Codes.Function();
                     func.setName((String)i1);
                     func.setLevel(Codes.FunctionLevel.InstanceLevel);
                     List<Codes.Identifier> ids = new ArrayList<Codes.Identifier>();
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName((String)i2);
                     ids.add(id);
                     func.setParams(ids);
                     func.setCodes((List<Codes.Code>)el);
                     RESULT = func;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("function_exp",9, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-9)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function_exp ::= FUNCTION IDENTIFIER LPAREN IDENTIFIER arg_list RPAREN OF INSTANCE LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-9)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-9)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-9)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)).value;
		int al1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).left;
		int al1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).right;
		Object al1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Function func = new Codes.Function();
                     func.setName((String)i1);
                     func.setLevel(Codes.FunctionLevel.InstanceLevel);
                     List<Codes.Identifier> ids = new ArrayList<Codes.Identifier>();
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName((String)i2);
                     ids.add(id);
                     ids.addAll((List<Codes.Identifier>)al1);
                     func.setParams(ids);
                     func.setCodes((List<Codes.Code>)el);
                     RESULT = func;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("function_exp",9, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-10)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // callback_exp ::= ENCAPSULATE LPAREN RPAREN ARROW LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Function func = new Codes.Function();
                     func.setName("");
                     List<Codes.Identifier> ids = new ArrayList<Codes.Identifier>();
                     func.setParams(ids);
                     func.setCodes((List<Codes.Code>)el);
                     RESULT = func;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("callback_exp",18, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // callback_exp ::= ENCAPSULATE LPAREN IDENTIFIER arg_list RPAREN ARROW LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).value;
		int al1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).left;
		int al1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).right;
		Object al1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Function func = new Codes.Function();
                     func.setName("");
                     List<Codes.Identifier> ids = new ArrayList<Codes.Identifier>();
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName((String)i);
                     ids.add(id);
                     ids.addAll((List<Codes.Identifier>)al1);
                     func.setParams(ids);
                     func.setCodes((List<Codes.Code>)el);
                     RESULT = func;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("callback_exp",18, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // callback_exp ::= ENCAPSULATE LPAREN IDENTIFIER RPAREN ARROW LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Function func = new Codes.Function();
                     func.setName("");
                     List<Codes.Identifier> ids = new ArrayList<Codes.Identifier>();
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName((String)i);
                     ids.add(id);
                     func.setParams(ids);
                     func.setCodes((List<Codes.Code>)el);
                     RESULT = func;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("callback_exp",18, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arg_list ::= COMMA IDENTIFIER arg_list 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     List<Codes.Identifier> ids = (List<Codes.Identifier>)al;
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName((String)i);
                     ids.add(id);
                     RESULT = ids;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("arg_list",14, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arg_list ::= COMMA IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     List<Codes.Identifier> ids = new ArrayList<Codes.Identifier>();
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName((String)i);
                     ids.add(id);
                     RESULT = ids;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("arg_list",14, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // epsilon ::= 
            {
              Object RESULT =null;

              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("epsilon",17, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // try_exp ::= TRY LBRACE exp_list RBRACE CATCH LPAREN IDENTIFIER RPAREN LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int el1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).value;
		int el2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int el2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Try t = new Codes.Try();
                     t.setTryCode((List<Codes.Code>)el1);
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName((String)i);
                     t.setExVar(id);
                     t.setCatchCode((List<Codes.Code>)el2);
                     RESULT = t;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("try_exp",8, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-10)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // for_exp ::= FOR LPAREN exp SEMI exp SEMI exp RPAREN LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).value;
		int el1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.For f = new Codes.For();
                     f.setCounter((Codes.Code)e1);
                     f.setCondition((Codes.Code)e2);
                     f.setAction((Codes.Code)e3);
                     f.setCodes((List<Codes.Code>)el1);
                     RESULT = f;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("for_exp",3, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-10)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // foreach_exp ::= FOREACH LPAREN exp COLON exp RPAREN LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Foreach f = new Codes.Foreach();
                     f.setTemp((Codes.Identifier)e1);
                     f.setCollection((Codes.Code)e2);
                     f.setCodes((List<Codes.Code>)el);
                     RESULT = f;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("foreach_exp",4, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // while_exp ::= WHILE LPAREN exp RPAREN LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.While w = new Codes.While();
                     w.setCondition((Codes.Code)e1);
                     w.setCodes((List<Codes.Code>)el);
                     RESULT = w;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("while_exp",5, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elseif_exp ::= elseif_exp ELSE IF LPAREN exp RPAREN LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     List<Codes.ElseIf> r = (List<Codes.ElseIf>)ei;
                     Codes.ElseIf elif = new Codes.ElseIf();
                     elif.setCondition((Codes.Code)e2);
                     elif.setCodes((List<Codes.Code>)el);
                     r.add(elif);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("elseif_exp",12, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // elseif_exp ::= ELSE IF LPAREN exp RPAREN LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     List<Codes.ElseIf> r = new ArrayList<Codes.ElseIf>();
                     Codes.ElseIf elif = new Codes.ElseIf();
                     elif.setCondition((Codes.Code)e2);
                     elif.setCodes((List<Codes.Code>)el);
                     r.add(elif);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("elseif_exp",12, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if_exp ::= IF LPAREN exp RPAREN LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).value;
		int el1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.If r = new Codes.If();
                     r.setCondition((Codes.Code)e1);
                     r.setCodes((List<Codes.Code>)el1);
                     List<Codes.Code> extras = new ArrayList<Codes.Code>();
                     r.setExtras(extras);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("if_exp",6, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if_exp ::= IF LPAREN exp RPAREN LBRACE exp_list RBRACE ELSE LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-8)).value;
		int el1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).value;
		int el2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int el2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.If r = new Codes.If();
                     r.setCondition((Codes.Code)e1);
                     r.setCodes((List<Codes.Code>)el1);
                     List<Codes.Code> extras = new ArrayList<Codes.Code>();
                     Codes.Else elseC = new Codes.Else();
                     elseC.setCodes((List<Codes.Code>)el2);
                     extras.add(elseC);
                     r.setExtras(extras);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("if_exp",6, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-10)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if_exp ::= IF LPAREN exp RPAREN LBRACE exp_list RBRACE elseif_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).value;
		int el1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int eie1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int eie1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object eie1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.If r = new Codes.If();
                     r.setCondition((Codes.Code)e1);
                     r.setCodes((List<Codes.Code>)el1);
                     List<Codes.Code> extras = new ArrayList<Codes.Code>();
                     extras.addAll((List<Codes.Code>)eie1);
                     r.setExtras(extras);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("if_exp",6, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-7)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if_exp ::= IF LPAREN exp RPAREN LBRACE exp_list RBRACE elseif_exp ELSE LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-9)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-9)).value;
		int el1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).value;
		int eie1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).left;
		int eie1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).right;
		Object eie1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).value;
		int el2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int el2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.If r = new Codes.If();
                     r.setCondition((Codes.Code)e1);
                     r.setCodes((List<Codes.Code>)el1);
                     List<Codes.Code> extras = new ArrayList<Codes.Code>();
                     extras.addAll((List<Codes.Code>)eie1);
                     extras.add((Codes.Code)el2);
                     r.setExtras(extras);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("if_exp",6, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-11)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // case_exp ::= case_exp CASE exp COLON LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     List<Codes.Case> cases = (List<Codes.Case>)ce;
                     Codes.Case c = new Codes.Case();
                     c.setValue((Codes.Code)e1);
                     c.setCodes((List<Codes.Code>)el);
                     cases.add(c);
                     RESULT = cases;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("case_exp",13, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // case_exp ::= CASE exp COLON LBRACE exp_list RBRACE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     List<Codes.Case> cases = new ArrayList<Codes.Case>();
                     Codes.Case c = new Codes.Case();
                     c.setValue((Codes.Code)e1);
                     c.setCodes((List<Codes.Code>)el);
                     cases.add(c);
                     RESULT = cases;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("case_exp",13, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // switch_exp ::= SWITCH LPAREN exp RPAREN LBRACE case_exp RBRACE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Switch r = new Codes.Switch();
                     r.setValue((Codes.Code)e1);
                     r.setCases((List<Codes.Case>)ce);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("switch_exp",7, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp AND exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.MathExpAnd r = new Codes.MathExpAnd();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp OR exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.MathExpOr r = new Codes.MathExpOr();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp IS exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.Is r = new Codes.Is();
                     r.setCode1((Codes.Code)e1);
                     r.setCode2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp EQUAL exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.MathExpEqual r = new Codes.MathExpEqual();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp GE exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.MathExpGE r = new Codes.MathExpGE();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp GT exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.MathExpGT r = new Codes.MathExpGT();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp LT exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.MathExpLT r = new Codes.MathExpLT();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp LE exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.MathExpLE r = new Codes.MathExpLE();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp NE exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.MathExpNE r = new Codes.MathExpNE();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= IDENTIFIER ASSIGN exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.Assignment asg = new Codes.Assignment();
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName((String)i);
                     asg.setVar(id);
                     asg.setValue((Codes.Code)e1);
                     RESULT = asg;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= IDENTIFIER ASSIGN function_exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object fe = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.Assignment asg = new Codes.Assignment();
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName((String)i);
                     asg.setVar(id);
                     asg.setValue((Codes.Code)fe);
                     RESULT = asg;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= EXEC IDENTIFIER LPAREN param_list RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).value;
		int pl1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int pl1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object pl1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Call call = new Codes.Call();
                     call.setFunctionName((String)i);
                     call.setEntries((Hashtable<String, Codes.Code>)pl1);
                     RESULT = call;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= EXEC exp CHAINSIGN IDENTIFIER LPAREN param_list RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-3)).value;
		int pl1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int pl1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object pl1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Chains r = new Codes.Chains();
                     r.setCode1((Codes.Code)e1);
                     Codes.Call call = new Codes.Call();
                     call.setFunctionName((String)i);
                     call.setEntries((Hashtable<String, Codes.Code>)pl1);
                     r.setCode2(call);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-6)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= EXEC exp CHAINSIGN IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		
                     Codes.Chains r = new Codes.Chains();
                     r.setCode1((Codes.Code)e1);
                     Codes.Call call = new Codes.Call();
                     call.setFunctionName((String)i);
                     call.setEntries(new Hashtable<String, Codes.Code>());
                     r.setCode2(call);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-5)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= exp SUM exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.MathExpSum r = new Codes.MathExpSum();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= exp SUBTRACT exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.MathExpSubstract r = new Codes.MathExpSubstract();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= exp MULTIPLY exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.MathExpMultiply r = new Codes.MathExpMultiply();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= exp DIVISION exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.MathExpDivide r = new Codes.MathExpDivide();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= exp MOD exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.MathExpMod r = new Codes.MathExpMod();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= exp POWER exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.MathExpPower r = new Codes.MathExpPower();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= SUBTRACT exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.MathExpUminus r = new Codes.MathExpUminus();
                     r.setValue((Codes.Code)e);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= exp CHAINSIGN exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.Chains r = new Codes.Chains();
                     r.setCode1((Codes.Code)e1);
                     r.setCode2((Codes.Code)e2);
                     RESULT = r;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-1)).value;
		
                     Codes.Parenthesis p = new Codes.Parenthesis();
                     p.setCode((Codes.Code)e);
                     RESULT = p;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp ::= callback_exp 
            {
              Object RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     RESULT = (Codes.Code)ce;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp ::= identifier 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     RESULT = i;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.Value v = new Codes.Value();
                     v.setValue((Double)n);
                     RESULT = v;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.Value v = new Codes.Value();
                     v.setValue((String)s);
                     RESULT = v;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp ::= EMPTY 
            {
              Object RESULT =null;
		
                     Codes.Value v = new Codes.Value();
                     v.setValue(null);
                     RESULT = v;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // identifier ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName((String)i);
                     RESULT = id;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("identifier",19, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // param_list ::= param COMMA param_list 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int pl1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int pl1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object pl1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Hashtable<String, Codes.Code> ht = (Hashtable<String, Codes.Code>)pl1;
                     Pair<String, Codes.Code> castedP1 = (Pair<String, Codes.Code>)p1;
                     ht.put(castedP1.first, castedP1.second);
                     RESULT = ht;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("param_list",15, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // param_list ::= param 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     Hashtable<String, Codes.Code> ht = new Hashtable<String, Codes.Code>();
                     Pair<String, Codes.Code> castedP1 = (Pair<String, Codes.Code>)p1;
                     ht.put(castedP1.first, castedP1.second);
                     RESULT = ht;
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("param_list",15, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // param_list ::= epsilon 
            {
              Object RESULT =null;
		
                     RESULT = new Hashtable<String, Codes.Code>();
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("param_list",15, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // param ::= IDENTIFIER COLON exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EogenParser$stack.peek()).value;
		
                     RESULT = new Pair<String, Codes.Code>(i, (Codes.Code)e1);
                 
              CUP$EogenParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$EogenParser$stack.elementAt(CUP$EogenParser$top-2)), ((java_cup.runtime.Symbol)CUP$EogenParser$stack.peek()), RESULT);
            }
          return CUP$EogenParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$EogenParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$EogenParser$do_action(
    int                        CUP$EogenParser$act_num,
    java_cup.runtime.lr_parser CUP$EogenParser$parser,
    java.util.Stack            CUP$EogenParser$stack,
    int                        CUP$EogenParser$top)
    throws java.lang.Exception
    {
              return CUP$EogenParser$do_action_part00000000(
                               CUP$EogenParser$act_num,
                               CUP$EogenParser$parser,
                               CUP$EogenParser$stack,
                               CUP$EogenParser$top);
    }
}

}
