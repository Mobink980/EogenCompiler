/* The following code was generated by JFlex 1.7.0 */

import java.util.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>eogencompiler.flex</tt>
 */
public class EogenLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\55\1\3\1\2\1\0\1\3\1\1\16\55\4\0\1\3\1\64"+
    "\1\65\1\0\1\54\2\0\1\12\1\50\1\51\1\5\1\43\1\61"+
    "\1\15\1\13\1\4\1\6\3\7\4\7\2\7\1\60\1\57\1\62"+
    "\1\53\1\63\2\0\4\11\1\14\1\11\21\54\1\10\2\54\1\46"+
    "\1\12\1\47\1\45\1\54\1\0\1\22\1\33\1\21\1\36\1\26"+
    "\1\24\1\54\1\23\1\30\1\54\1\40\1\31\1\44\1\37\1\25"+
    "\1\42\1\54\1\17\1\32\1\16\1\35\1\34\1\27\1\41\1\20"+
    "\1\54\1\52\1\0\1\56\1\0\41\55\2\0\4\54\4\0\1\54"+
    "\2\0\1\55\7\0\1\54\4\0\1\54\5\0\27\54\1\0\37\54"+
    "\1\0\u01ca\54\4\0\14\54\16\0\5\54\7\0\1\54\1\0\1\54"+
    "\21\0\160\55\5\54\1\0\2\54\2\0\4\54\1\0\1\54\6\0"+
    "\1\54\1\0\3\54\1\0\1\54\1\0\24\54\1\0\123\54\1\0"+
    "\213\54\1\0\5\55\2\0\246\54\1\0\46\54\2\0\1\54\7\0"+
    "\47\54\7\0\1\54\1\0\55\55\1\0\1\55\1\0\2\55\1\0"+
    "\2\55\1\0\1\55\10\0\33\54\5\0\3\54\15\0\6\55\5\0"+
    "\1\54\4\0\13\55\1\0\1\55\3\0\53\54\37\55\4\0\2\54"+
    "\1\55\143\54\1\0\1\54\10\55\1\0\6\55\2\54\2\55\1\0"+
    "\4\55\2\54\12\55\3\54\2\0\1\54\17\0\1\55\1\54\1\55"+
    "\36\54\33\55\2\0\131\54\13\55\1\54\16\0\12\55\41\54\11\55"+
    "\2\54\4\0\1\54\5\0\26\54\4\55\1\54\11\55\1\54\3\55"+
    "\1\54\5\55\22\0\31\54\3\55\4\0\13\54\65\0\25\54\1\0"+
    "\10\54\26\0\60\55\66\54\3\55\1\54\22\55\1\54\7\55\12\54"+
    "\2\55\2\0\12\55\1\0\20\54\3\55\1\0\10\54\2\0\2\54"+
    "\2\0\26\54\1\0\7\54\1\0\1\54\3\0\4\54\2\0\1\55"+
    "\1\54\7\55\2\0\2\55\2\0\3\55\1\54\10\0\1\55\4\0"+
    "\2\54\1\0\3\54\2\55\2\0\12\55\4\54\7\0\2\54\4\0"+
    "\3\55\1\0\6\54\4\0\2\54\2\0\26\54\1\0\7\54\1\0"+
    "\2\54\1\0\2\54\1\0\2\54\2\0\1\55\1\0\5\55\4\0"+
    "\2\55\2\0\3\55\3\0\1\55\7\0\4\54\1\0\1\54\7\0"+
    "\14\55\3\54\1\55\13\0\3\55\1\0\11\54\1\0\3\54\1\0"+
    "\26\54\1\0\7\54\1\0\2\54\1\0\5\54\2\0\1\55\1\54"+
    "\10\55\1\0\3\55\1\0\3\55\2\0\1\54\17\0\2\54\2\55"+
    "\2\0\12\55\1\0\1\54\7\0\1\54\6\55\1\0\3\55\1\0"+
    "\10\54\2\0\2\54\2\0\26\54\1\0\7\54\1\0\2\54\1\0"+
    "\5\54\2\0\1\55\1\54\7\55\2\0\2\55\2\0\3\55\10\0"+
    "\2\55\4\0\2\54\1\0\3\54\2\55\2\0\12\55\1\0\1\54"+
    "\20\0\1\55\1\54\1\0\6\54\3\0\3\54\1\0\4\54\3\0"+
    "\2\54\1\0\1\54\1\0\2\54\3\0\2\54\3\0\3\54\3\0"+
    "\14\54\4\0\5\55\3\0\3\55\1\0\4\55\2\0\1\54\6\0"+
    "\1\55\16\0\12\55\11\0\1\54\6\0\4\55\1\0\10\54\1\0"+
    "\3\54\1\0\27\54\1\0\20\54\3\0\1\54\7\55\1\0\3\55"+
    "\1\0\4\55\7\0\2\55\1\0\3\54\5\0\2\54\2\55\2\0"+
    "\12\55\20\0\1\54\3\55\1\0\10\54\1\0\3\54\1\0\27\54"+
    "\1\0\12\54\1\0\5\54\2\0\1\55\1\54\7\55\1\0\3\55"+
    "\1\0\4\55\7\0\2\55\7\0\1\54\1\0\2\54\2\55\2\0"+
    "\12\55\1\0\2\54\15\0\4\55\1\0\10\54\1\0\3\54\1\0"+
    "\51\54\2\55\1\54\7\55\1\0\3\55\1\0\4\55\1\54\5\0"+
    "\3\54\1\55\7\0\3\54\2\55\2\0\12\55\12\0\6\54\2\0"+
    "\2\55\1\0\22\54\3\0\30\54\1\0\11\54\1\0\1\54\2\0"+
    "\7\54\3\0\1\55\4\0\6\55\1\0\1\55\1\0\10\55\6\0"+
    "\12\55\2\0\2\55\15\0\60\54\1\55\2\54\7\55\4\0\10\54"+
    "\10\55\1\0\12\55\47\0\2\54\1\0\1\54\2\0\2\54\1\0"+
    "\1\54\2\0\1\54\6\0\4\54\1\0\7\54\1\0\3\54\1\0"+
    "\1\54\1\0\1\54\2\0\2\54\1\0\4\54\1\55\2\54\6\55"+
    "\1\0\2\55\1\54\2\0\5\54\1\0\1\54\1\0\6\55\2\0"+
    "\12\55\2\0\4\54\40\0\1\54\27\0\2\55\6\0\12\55\13\0"+
    "\1\55\1\0\1\55\1\0\1\55\4\0\2\55\10\54\1\0\44\54"+
    "\4\0\24\55\1\0\2\55\5\54\13\55\1\0\44\55\11\0\1\55"+
    "\71\0\53\54\24\55\1\54\12\55\6\0\6\54\4\55\4\54\3\55"+
    "\1\54\3\55\2\54\7\55\3\54\4\55\15\54\14\55\1\54\17\55"+
    "\2\0\46\54\1\0\1\54\5\0\1\54\2\0\53\54\1\0\u014d\54"+
    "\1\0\4\54\2\0\7\54\1\0\1\54\1\0\4\54\2\0\51\54"+
    "\1\0\4\54\2\0\41\54\1\0\4\54\2\0\7\54\1\0\1\54"+
    "\1\0\4\54\2\0\17\54\1\0\71\54\1\0\4\54\2\0\103\54"+
    "\2\0\3\55\40\0\20\54\20\0\126\54\2\0\6\54\3\0\u026c\54"+
    "\2\0\21\54\1\0\32\54\5\0\113\54\3\0\13\54\7\0\15\54"+
    "\1\0\4\54\3\55\13\0\22\54\3\55\13\0\22\54\2\55\14\0"+
    "\15\54\1\0\3\54\1\0\2\55\14\0\64\54\40\55\3\0\1\54"+
    "\3\0\2\54\1\55\2\0\12\55\41\0\4\55\1\0\12\55\6\0"+
    "\130\54\10\0\5\54\2\55\42\54\1\55\1\54\5\0\106\54\12\0"+
    "\37\54\1\0\14\55\4\0\14\55\12\0\12\55\36\54\2\0\5\54"+
    "\13\0\54\54\4\0\32\54\6\0\12\55\46\0\27\54\5\55\4\0"+
    "\65\54\12\55\1\0\35\55\2\0\13\55\6\0\12\55\15\0\1\54"+
    "\10\0\16\55\102\0\5\55\57\54\21\55\7\54\4\0\12\55\21\0"+
    "\11\55\14\0\3\55\36\54\15\55\2\54\12\55\54\54\16\55\14\0"+
    "\44\54\24\55\10\0\12\55\3\0\3\54\12\55\44\54\2\0\11\54"+
    "\107\0\3\55\1\0\25\55\4\54\1\55\4\54\3\55\2\54\3\55"+
    "\6\0\300\54\72\55\1\0\5\55\u0116\54\2\0\6\54\2\0\46\54"+
    "\2\0\6\54\2\0\10\54\1\0\1\54\1\0\1\54\1\0\1\54"+
    "\1\0\37\54\2\0\65\54\1\0\7\54\1\0\1\54\3\0\3\54"+
    "\1\0\7\54\3\0\4\54\2\0\6\54\4\0\15\54\5\0\3\54"+
    "\1\0\7\54\16\0\5\55\32\0\5\55\20\0\2\54\23\0\1\54"+
    "\13\0\5\55\1\0\12\55\1\0\1\54\15\0\1\54\20\0\15\54"+
    "\3\0\40\54\20\0\15\55\4\0\1\55\3\0\14\55\21\0\1\54"+
    "\4\0\1\54\2\0\12\54\1\0\1\54\3\0\5\54\6\0\1\54"+
    "\1\0\1\54\1\0\1\54\1\0\4\54\1\0\13\54\2\0\4\54"+
    "\5\0\5\54\4\0\1\54\21\0\51\54\u0a77\0\57\54\1\0\57\54"+
    "\1\0\205\54\6\0\4\54\3\55\2\54\14\0\46\54\1\0\1\54"+
    "\5\0\1\54\2\0\70\54\7\0\1\54\17\0\1\55\27\54\11\0"+
    "\7\54\1\0\7\54\1\0\7\54\1\0\7\54\1\0\7\54\1\0"+
    "\7\54\1\0\7\54\1\0\7\54\1\0\40\55\57\0\1\54\u01d5\0"+
    "\3\54\31\0\11\54\6\55\1\0\5\54\2\0\5\54\4\0\126\54"+
    "\2\0\2\55\2\0\3\54\1\0\132\54\1\0\4\54\5\0\52\54"+
    "\2\0\136\54\21\0\33\54\65\0\20\54\u0200\0\u19b6\54\112\0\u51eb\54"+
    "\25\0\u048d\54\103\0\56\54\2\0\u010d\54\3\0\20\54\12\55\2\54"+
    "\24\0\57\54\1\55\4\0\12\55\1\0\37\54\2\55\120\54\2\55"+
    "\45\0\11\54\2\0\147\54\2\0\44\54\1\0\10\54\77\0\13\54"+
    "\1\55\3\54\1\55\4\54\1\55\27\54\5\55\20\0\1\54\7\0"+
    "\64\54\14\0\2\55\62\54\22\55\12\0\12\55\6\0\22\55\6\54"+
    "\3\0\1\54\1\0\1\54\2\0\12\55\34\54\10\55\2\0\27\54"+
    "\15\55\14\0\35\54\3\0\4\55\57\54\16\55\16\0\1\54\12\55"+
    "\6\0\5\54\1\55\12\54\12\55\5\54\1\0\51\54\16\55\11\0"+
    "\3\54\1\55\10\54\2\55\2\0\12\55\6\0\27\54\3\0\1\54"+
    "\3\55\62\54\1\55\1\54\3\55\2\54\2\55\5\54\2\55\1\54"+
    "\1\55\1\54\30\0\3\54\2\0\13\54\5\55\2\0\3\54\2\55"+
    "\12\0\6\54\2\0\6\54\2\0\6\54\11\0\7\54\1\0\7\54"+
    "\1\0\53\54\1\0\12\54\12\0\163\54\10\55\1\0\2\55\2\0"+
    "\12\55\6\0\u2ba4\54\14\0\27\54\4\0\61\54\u2104\0\u016e\54\2\0"+
    "\152\54\46\0\7\54\14\0\5\54\5\0\1\54\1\55\12\54\1\0"+
    "\15\54\1\0\5\54\1\0\1\54\1\0\2\54\1\0\2\54\1\0"+
    "\154\54\41\0\u016b\54\22\0\100\54\2\0\66\54\50\0\15\54\3\0"+
    "\20\55\20\0\20\55\3\0\2\54\30\0\3\54\31\0\1\54\6\0"+
    "\5\54\1\0\207\54\2\0\1\55\4\0\1\54\13\0\12\55\7\0"+
    "\32\54\4\0\1\54\1\0\32\54\13\0\131\54\3\0\6\54\2\0"+
    "\6\54\2\0\6\54\2\0\3\54\3\0\2\54\3\0\2\54\22\0"+
    "\3\55\4\0\14\54\1\0\32\54\1\0\23\54\1\0\2\54\1\0"+
    "\17\54\2\0\16\54\42\0\173\54\105\0\65\54\210\0\1\55\202\0"+
    "\35\54\3\0\61\54\17\0\1\55\37\0\40\54\15\0\36\54\5\0"+
    "\46\54\5\55\5\0\36\54\2\0\44\54\4\0\10\54\1\0\5\54"+
    "\52\0\236\54\2\0\12\55\6\0\44\54\4\0\44\54\4\0\50\54"+
    "\10\0\64\54\234\0\u0137\54\11\0\26\54\12\0\10\54\230\0\6\54"+
    "\2\0\1\54\1\0\54\54\1\0\2\54\3\0\1\54\2\0\27\54"+
    "\12\0\27\54\11\0\37\54\101\0\23\54\1\0\2\54\12\0\26\54"+
    "\12\0\32\54\106\0\70\54\6\0\2\54\100\0\1\54\3\55\1\0"+
    "\2\55\5\0\4\55\4\54\1\0\3\54\1\0\33\54\4\0\3\55"+
    "\4\0\1\55\40\0\35\54\3\0\35\54\43\0\10\54\1\0\34\54"+
    "\2\55\31\0\66\54\12\0\26\54\12\0\23\54\15\0\22\54\156\0"+
    "\111\54\67\0\63\54\15\0\63\54\u030d\0\3\55\65\54\17\55\37\0"+
    "\12\55\17\0\4\55\55\54\13\55\2\0\1\55\22\0\31\54\7\0"+
    "\12\55\6\0\3\55\44\54\16\55\1\0\12\55\20\0\43\54\1\55"+
    "\2\0\1\54\11\0\3\55\60\54\16\55\4\54\5\0\3\55\3\0"+
    "\12\55\1\54\1\0\1\54\43\0\22\54\1\0\31\54\14\55\6\0"+
    "\1\55\101\0\7\54\1\0\1\54\1\0\4\54\1\0\17\54\1\0"+
    "\12\54\7\0\57\54\14\55\5\0\12\55\6\0\4\55\1\0\10\54"+
    "\2\0\2\54\2\0\26\54\1\0\7\54\1\0\2\54\1\0\5\54"+
    "\2\0\1\55\1\54\7\55\2\0\2\55\2\0\3\55\2\0\1\54"+
    "\6\0\1\55\5\0\5\54\2\55\2\0\7\55\3\0\5\55\213\0"+
    "\65\54\22\55\4\54\5\0\12\55\46\0\60\54\24\55\2\54\1\0"+
    "\1\54\10\0\12\55\246\0\57\54\7\55\2\0\11\55\27\0\4\54"+
    "\2\55\42\0\60\54\21\55\3\0\1\54\13\0\12\55\46\0\53\54"+
    "\15\55\10\0\12\55\66\0\32\54\3\0\17\55\4\0\12\55\u0166\0"+
    "\100\54\12\55\25\0\1\54\u0100\0\1\54\12\55\50\54\7\55\1\54"+
    "\4\55\10\0\1\55\10\0\1\54\13\55\50\54\2\0\4\54\20\55"+
    "\46\0\71\54\u0107\0\11\54\1\0\45\54\10\55\1\0\10\55\1\54"+
    "\17\0\12\55\30\0\36\54\2\0\26\55\1\0\16\55\111\0\7\54"+
    "\1\0\2\54\1\0\46\54\6\55\3\0\1\55\1\0\2\55\1\0"+
    "\7\55\1\54\1\55\10\0\12\55\u02a6\0\u039a\54\146\0\157\54\21\0"+
    "\304\54\u0abc\0\u042f\54\u0fd1\0\u0247\54\u21b9\0\u0239\54\7\0\37\54\1\0"+
    "\12\55\146\0\36\54\2\0\5\55\13\0\60\54\7\55\11\0\4\54"+
    "\14\0\12\55\11\0\25\54\5\0\23\54\u0370\0\105\54\13\0\1\54"+
    "\56\55\20\0\4\55\15\54\100\0\2\54\36\0\u17ed\54\23\0\u02f3\54"+
    "\u250d\0\u011f\54\121\0\u018c\54\u0904\0\153\54\5\0\15\54\3\0\11\54"+
    "\7\0\12\54\3\0\2\55\1\0\4\55\u14c1\0\5\55\3\0\26\55"+
    "\2\0\7\55\36\0\4\55\224\0\3\55\u01bb\0\125\54\1\0\107\54"+
    "\1\0\2\54\2\0\1\54\2\0\2\54\2\0\4\54\1\0\14\54"+
    "\1\0\1\54\1\0\7\54\1\0\101\54\1\0\4\54\2\0\10\54"+
    "\1\0\7\54\1\0\34\54\1\0\4\54\1\0\5\54\1\0\1\54"+
    "\3\0\7\54\1\0\u0154\54\2\0\31\54\1\0\31\54\1\0\37\54"+
    "\1\0\31\54\1\0\37\54\1\0\31\54\1\0\37\54\1\0\31\54"+
    "\1\0\37\54\1\0\31\54\1\0\10\54\2\0\62\55\u0200\0\67\55"+
    "\4\0\62\55\10\0\1\55\16\0\1\55\26\0\5\55\1\0\17\55"+
    "\u0550\0\7\55\1\0\21\55\2\0\7\55\1\0\2\55\1\0\5\55"+
    "\u07d5\0\305\54\13\0\7\55\51\0\104\54\7\55\5\0\12\55\u04a6\0"+
    "\4\54\1\0\33\54\1\0\2\54\1\0\1\54\2\0\1\54\1\0"+
    "\12\54\1\0\4\54\1\0\1\54\1\0\1\54\6\0\1\54\4\0"+
    "\1\54\1\0\1\54\1\0\1\54\1\0\3\54\1\0\2\54\1\0"+
    "\1\54\2\0\1\54\1\0\1\54\1\0\1\54\1\0\1\54\1\0"+
    "\1\54\1\0\2\54\1\0\1\54\2\0\4\54\1\0\7\54\1\0"+
    "\4\54\1\0\4\54\1\0\1\54\1\0\12\54\1\0\21\54\5\0"+
    "\3\54\1\0\5\54\1\0\21\54\u1144\0\ua6d7\54\51\0\u1035\54\13\0"+
    "\336\54\2\0\u1682\54\16\0\u1d31\54\u0c1f\0\u021e\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\55\36\0\140\55\200\0\360\55\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\2\5\1\6\1\7"+
    "\1\10\1\11\13\6\1\12\1\6\1\13\1\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\1\1\26\1\2\2\0\1\5\1\0\1\27"+
    "\6\6\1\30\1\31\4\6\1\32\1\33\6\6\2\0"+
    "\1\34\1\35\1\36\1\37\1\0\3\5\1\0\1\40"+
    "\4\6\1\41\12\6\1\42\1\0\1\5\2\6\1\43"+
    "\3\6\1\44\1\6\1\45\2\6\1\46\3\6\1\0"+
    "\1\5\1\6\1\47\1\50\2\6\1\51\1\52\2\6"+
    "\1\53\1\6\1\0\1\5\1\54\3\6\1\55\2\6"+
    "\1\0\1\5\1\56\2\6\1\57\1\6\1\60\1\5"+
    "\1\61\1\62\1\6\1\5\1\63\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\66\0\242\0\66\0\330\0\u010e"+
    "\0\u0144\0\66\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\66"+
    "\0\u0438\0\66\0\u046e\0\66\0\66\0\66\0\u04a4\0\66"+
    "\0\66\0\66\0\66\0\u04da\0\u0510\0\u0546\0\66\0\u057c"+
    "\0\u05b2\0\u05e8\0\u061e\0\u0654\0\66\0\u068a\0\u06c0\0\u06f6"+
    "\0\u072c\0\u0762\0\u0798\0\u0144\0\u0144\0\u07ce\0\u0804\0\u083a"+
    "\0\u0870\0\u0144\0\u0144\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e"+
    "\0\u09b4\0\u046e\0\u09ea\0\66\0\66\0\66\0\66\0\u0a20"+
    "\0\u05e8\0\u0a56\0\u0a8c\0\u0a8c\0\u0144\0\u0ac2\0\u0af8\0\u0b2e"+
    "\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde"+
    "\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0144\0\u0dec\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\u0144\0\u0ec4\0\u0efa\0\u0f30\0\u0144\0\u0f66\0\u0144"+
    "\0\u0f9c\0\u0fd2\0\u0144\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0"+
    "\0\u1116\0\u0144\0\u0144\0\u114c\0\u1182\0\u0144\0\u0144\0\u11b8"+
    "\0\u11ee\0\u0144\0\u1224\0\u125a\0\u1290\0\u0144\0\u12c6\0\u12fc"+
    "\0\u1332\0\u0144\0\u1368\0\u139e\0\u13d4\0\u140a\0\u0144\0\u1440"+
    "\0\u1476\0\u0144\0\u14ac\0\66\0\u14e2\0\u0144\0\u0144\0\u1518"+
    "\0\u154e\0\u0144\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\2\11"+
    "\1\12\1\13\1\11\1\14\1\15\1\16\1\11\1\17"+
    "\2\11\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\7\11\1\30\1\31\1\32\1\33\1\2\1\34"+
    "\1\35\1\36\1\37\1\11\1\2\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\70\0\1\4\67\0"+
    "\1\50\1\51\66\0\2\10\1\52\2\0\1\53\1\54"+
    "\11\0\1\54\12\0\1\52\32\0\2\10\3\0\1\53"+
    "\1\54\11\0\1\54\45\0\4\11\2\0\1\11\1\0"+
    "\25\11\1\0\1\11\7\0\2\11\16\0\2\53\141\0"+
    "\1\55\10\0\4\11\2\0\1\11\1\0\1\11\1\56"+
    "\23\11\1\0\1\11\7\0\2\11\16\0\4\11\2\0"+
    "\1\11\1\0\10\11\1\57\14\11\1\0\1\11\7\0"+
    "\2\11\16\0\4\11\2\0\1\11\1\0\4\11\1\60"+
    "\6\11\1\61\11\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\7\11\1\62\7\11\1\63"+
    "\5\11\1\0\1\11\7\0\2\11\16\0\4\11\2\0"+
    "\1\11\1\0\6\11\1\64\12\11\1\65\3\11\1\0"+
    "\1\11\7\0\2\11\16\0\4\11\2\0\1\11\1\0"+
    "\13\11\1\66\5\11\1\67\1\11\1\70\1\11\1\0"+
    "\1\11\7\0\2\11\16\0\4\11\2\0\1\11\1\0"+
    "\5\11\1\71\17\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\6\11\1\72\5\11\1\73"+
    "\4\11\1\74\3\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\12\11\1\75\12\11\1\0"+
    "\1\11\7\0\2\11\16\0\4\11\2\0\1\11\1\0"+
    "\11\11\1\76\13\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\4\11\1\77\3\11\1\100"+
    "\14\11\1\0\1\11\7\0\2\11\16\0\4\11\2\0"+
    "\1\11\1\0\7\11\1\101\15\11\1\0\1\11\7\0"+
    "\2\11\11\0\3\102\22\0\1\103\112\0\1\104\65\0"+
    "\1\105\65\0\1\106\65\0\1\107\12\0\1\50\1\3"+
    "\1\4\63\50\5\51\1\110\60\51\6\0\1\111\1\112"+
    "\1\0\1\112\2\0\1\112\4\0\2\112\1\0\1\112"+
    "\1\0\1\112\4\0\1\112\2\0\1\112\35\0\2\53"+
    "\4\0\1\54\11\0\1\54\45\0\2\113\5\0\1\114"+
    "\25\0\1\114\30\0\4\11\2\0\1\11\1\0\2\11"+
    "\1\115\22\11\1\0\1\11\7\0\2\11\16\0\4\11"+
    "\2\0\1\11\1\0\1\116\24\11\1\0\1\11\7\0"+
    "\2\11\16\0\4\11\2\0\1\11\1\0\1\117\13\11"+
    "\1\120\10\11\1\0\1\11\7\0\2\11\16\0\4\11"+
    "\2\0\1\11\1\0\4\11\1\121\20\11\1\0\1\11"+
    "\7\0\2\11\16\0\4\11\2\0\1\11\1\0\1\11"+
    "\1\122\23\11\1\0\1\11\7\0\2\11\16\0\4\11"+
    "\2\0\1\11\1\0\21\11\1\123\3\11\1\0\1\11"+
    "\7\0\2\11\16\0\4\11\2\0\1\11\1\0\14\11"+
    "\1\124\10\11\1\0\1\11\7\0\2\11\16\0\4\11"+
    "\2\0\1\11\1\0\3\11\1\125\21\11\1\0\1\11"+
    "\7\0\2\11\16\0\4\11\2\0\1\11\1\0\10\11"+
    "\1\126\14\11\1\0\1\11\7\0\2\11\16\0\4\11"+
    "\2\0\1\11\1\0\12\11\1\127\12\11\1\0\1\11"+
    "\7\0\2\11\16\0\4\11\2\0\1\11\1\0\14\11"+
    "\1\130\10\11\1\0\1\11\7\0\2\11\16\0\4\11"+
    "\2\0\1\11\1\0\22\11\1\131\2\11\1\0\1\11"+
    "\7\0\2\11\16\0\4\11\2\0\1\11\1\0\12\11"+
    "\1\132\12\11\1\0\1\11\7\0\2\11\16\0\4\11"+
    "\2\0\1\11\1\0\14\11\1\133\10\11\1\0\1\11"+
    "\7\0\2\11\16\0\4\11\2\0\1\11\1\0\5\11"+
    "\1\134\17\11\1\0\1\11\7\0\2\11\16\0\4\11"+
    "\2\0\1\11\1\0\20\11\1\135\4\11\1\0\1\11"+
    "\7\0\2\11\54\0\1\136\21\0\4\51\1\4\1\110"+
    "\60\51\6\0\2\137\1\0\1\137\2\0\1\137\4\0"+
    "\2\137\1\0\1\137\1\0\1\137\4\0\1\137\2\0"+
    "\1\137\35\0\2\113\64\0\4\11\2\0\1\11\1\0"+
    "\17\11\1\140\5\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\3\11\1\141\21\11\1\0"+
    "\1\11\7\0\2\11\16\0\4\11\2\0\1\11\1\0"+
    "\10\11\1\142\14\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\14\11\1\143\10\11\1\0"+
    "\1\11\7\0\2\11\16\0\4\11\2\0\1\11\1\0"+
    "\10\11\1\144\14\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\3\11\1\145\21\11\1\0"+
    "\1\11\7\0\2\11\16\0\4\11\2\0\1\11\1\0"+
    "\10\11\1\146\14\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\4\11\1\147\20\11\1\0"+
    "\1\11\7\0\2\11\16\0\4\11\2\0\1\11\1\0"+
    "\3\11\1\150\21\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\13\11\1\151\11\11\1\0"+
    "\1\11\7\0\2\11\16\0\4\11\2\0\1\11\1\0"+
    "\1\152\24\11\1\0\1\11\7\0\2\11\16\0\4\11"+
    "\2\0\1\11\1\0\10\11\1\153\14\11\1\0\1\11"+
    "\7\0\2\11\16\0\4\11\2\0\1\11\1\0\1\154"+
    "\24\11\1\0\1\11\7\0\2\11\16\0\4\11\2\0"+
    "\1\11\1\0\10\11\1\155\14\11\1\0\1\11\7\0"+
    "\2\11\16\0\4\11\2\0\1\11\1\0\4\11\1\156"+
    "\20\11\1\0\1\11\7\0\2\11\52\0\1\157\31\0"+
    "\2\160\1\0\1\160\2\0\1\160\4\0\2\160\1\0"+
    "\1\160\1\0\1\160\4\0\1\160\2\0\1\160\35\0"+
    "\4\11\2\0\1\11\1\0\1\11\1\161\23\11\1\0"+
    "\1\11\7\0\2\11\16\0\4\11\2\0\1\11\1\0"+
    "\5\11\1\162\17\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\14\11\1\163\10\11\1\0"+
    "\1\11\7\0\2\11\16\0\4\11\2\0\1\11\1\0"+
    "\4\11\1\164\20\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\1\165\24\11\1\0\1\11"+
    "\7\0\2\11\16\0\4\11\2\0\1\11\1\0\24\11"+
    "\1\166\1\0\1\11\7\0\2\11\16\0\4\11\2\0"+
    "\1\11\1\0\10\11\1\167\14\11\1\0\1\11\7\0"+
    "\2\11\16\0\4\11\2\0\1\11\1\0\4\11\1\170"+
    "\20\11\1\0\1\11\7\0\2\11\16\0\4\11\2\0"+
    "\1\11\1\0\3\11\1\171\21\11\1\0\1\11\7\0"+
    "\2\11\16\0\4\11\2\0\1\11\1\0\20\11\1\172"+
    "\4\11\1\0\1\11\7\0\2\11\16\0\4\11\2\0"+
    "\1\11\1\0\16\11\1\173\6\11\1\0\1\11\7\0"+
    "\2\11\26\0\1\174\55\0\2\175\1\0\1\175\2\0"+
    "\1\175\4\0\2\175\1\0\1\175\1\0\1\175\4\0"+
    "\1\175\2\0\1\175\35\0\4\11\2\0\1\11\1\0"+
    "\21\11\1\176\3\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\3\11\1\177\21\11\1\0"+
    "\1\11\7\0\2\11\16\0\4\11\2\0\1\11\1\0"+
    "\12\11\1\200\12\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\21\11\1\201\3\11\1\0"+
    "\1\11\7\0\2\11\16\0\4\11\2\0\1\11\1\0"+
    "\5\11\1\202\17\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\10\11\1\203\1\11\1\204"+
    "\12\11\1\0\1\11\7\0\2\11\30\0\1\205\53\0"+
    "\2\206\1\0\1\206\2\0\1\206\4\0\2\206\1\0"+
    "\1\206\1\0\1\206\4\0\1\206\2\0\1\206\35\0"+
    "\4\11\2\0\1\11\1\0\5\11\1\207\17\11\1\0"+
    "\1\11\7\0\2\11\16\0\4\11\2\0\1\11\1\0"+
    "\7\11\1\210\15\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\3\11\1\211\21\11\1\0"+
    "\1\11\7\0\2\11\16\0\4\11\2\0\1\11\1\0"+
    "\14\11\1\212\10\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\7\11\1\213\15\11\1\0"+
    "\1\11\7\0\2\11\11\0\3\205\43\0\1\214\24\0"+
    "\2\215\1\0\1\215\2\0\1\215\4\0\2\215\1\0"+
    "\1\215\1\0\1\215\4\0\1\215\2\0\1\215\35\0"+
    "\4\11\2\0\1\11\1\0\21\11\1\216\3\11\1\0"+
    "\1\11\7\0\2\11\16\0\4\11\2\0\1\11\1\0"+
    "\10\11\1\217\14\11\1\0\1\11\7\0\2\11\16\0"+
    "\4\11\2\0\1\11\1\0\17\11\1\220\5\11\1\0"+
    "\1\11\7\0\2\11\16\0\2\221\1\0\1\221\2\0"+
    "\1\221\4\0\2\221\1\0\1\221\1\0\1\221\4\0"+
    "\1\221\2\0\1\221\35\0\4\11\2\0\1\11\1\0"+
    "\1\11\1\222\23\11\1\0\1\11\7\0\2\11\16\0"+
    "\2\223\1\0\1\223\2\0\1\223\4\0\2\223\1\0"+
    "\1\223\1\0\1\223\4\0\1\223\2\0\1\223\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5508];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\15\1\1\11\1\1\1\11\1\1\3\11\1\1\4\11"+
    "\3\1\1\11\1\1\2\0\1\1\1\0\1\11\24\1"+
    "\2\0\4\11\1\0\3\1\1\0\21\1\1\0\20\1"+
    "\1\0\14\1\1\0\10\1\1\0\6\1\1\11\6\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public class Tuple {
        public final int line;
        public final int col;
        public final String token;
        public final String type;

        public Tuple(int line, int col, String token, String type) {
            this.line = line;
            this.col = col;
            this.token = token;
            this.type = type;
        }
    }

    HashSet<String> keywords = new HashSet<>(Arrays.asList(
            "if", "else", "while", "switch", "case", "for", "foreach", "class", "behaviour",
            "based", "on", "behaves", "like", "try", "catch", "function",
            "mod", "of", "instance", "empty", "is"
            ));

    boolean foundString = false;
    StringBuilder string = new StringBuilder();

    public Symbol exportToken(int symNum, Object value, int line, int column) {

        if (value instanceof String && !(symNum == sym.LPAREN || symNum == sym.RPAREN)) {
            String text = (String) value;
            text = text.replace("(", "");
            text = text.replace("[", "");
            text = text.replace("{", "");
            text = text.replace(")", "");
            text = text.replace("]", "");
            text = text.replace("}", "");
            value = text;
        }

        if (symNum == sym.IDENTIFIER)
            if (!keywords.contains(value))
                return new Symbol(symNum, line, column, value);

        return new Symbol(symNum, line, column, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EogenLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3454) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { if (foundString) string.append(yytext());
            } 
            // fall through
          case 52: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 53: break;
          case 3: 
            { return exportToken(sym.DIVISION, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 54: break;
          case 4: 
            { return exportToken(sym.MULTIPLY, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 55: break;
          case 5: 
            { if (!foundString) return exportToken(sym.NUMBER, Double.parseDouble(yytext()), yyline, yycolumn);
    else string.append(yytext());
            } 
            // fall through
          case 56: break;
          case 6: 
            { if (!foundString) return exportToken(sym.IDENTIFIER, yytext(), yyline, yycolumn);
    else string.append(yytext());
            } 
            // fall through
          case 57: break;
          case 7: 
            { System.out.print(yytext());
            } 
            // fall through
          case 58: break;
          case 8: 
            { return exportToken(sym.CHAINSIGN, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 59: break;
          case 9: 
            { return exportToken(sym.SUBTRACT, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 60: break;
          case 10: 
            { return exportToken(sym.SUM, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 61: break;
          case 11: 
            { return exportToken(sym.POWER, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 62: break;
          case 12: 
            { return exportToken(sym.LPAREN, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 63: break;
          case 13: 
            { return exportToken(sym.RPAREN, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 64: break;
          case 14: 
            { return exportToken(sym.LBRACE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 65: break;
          case 15: 
            { return exportToken(sym.ASSIGN, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 66: break;
          case 16: 
            { return exportToken(sym.RBRACE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 67: break;
          case 17: 
            { return exportToken(sym.SEMI, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 68: break;
          case 18: 
            { return exportToken(sym.COLON, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 69: break;
          case 19: 
            { return exportToken(sym.COMMA, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 70: break;
          case 20: 
            { return exportToken(sym.LT, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 71: break;
          case 21: 
            { return exportToken(sym.GT, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 72: break;
          case 22: 
            { if (!foundString) {
        foundString = true;
        string.append(yytext());
    } else {
        foundString = false;
        string.append(yytext());
        String result = string.toString();
        string.setLength(0);
        string = new StringBuilder();
        return exportToken(sym.STRING, result, yyline, yycolumn);
    }
            } 
            // fall through
          case 73: break;
          case 23: 
            { return exportToken(sym.ARROW, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 74: break;
          case 24: 
            { return exportToken(sym.OF, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 75: break;
          case 25: 
            { return exportToken(sym.ON, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 76: break;
          case 26: 
            { return exportToken(sym.IF, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 77: break;
          case 27: 
            { return exportToken(sym.IS, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 78: break;
          case 28: 
            { return exportToken(sym.EQUAL, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 79: break;
          case 29: 
            { return exportToken(sym.LE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 80: break;
          case 30: 
            { return exportToken(sym.GE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 81: break;
          case 31: 
            { return exportToken(sym.NE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 82: break;
          case 32: 
            { return exportToken(sym.TRY, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 83: break;
          case 33: 
            { return exportToken(sym.FOR, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 84: break;
          case 34: 
            { return exportToken(sym.MOD, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 85: break;
          case 35: 
            { return exportToken(sym.CASE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 86: break;
          case 36: 
            { return exportToken(sym.ELSE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 87: break;
          case 37: 
            { return exportToken(sym.EXEC, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 88: break;
          case 38: 
            { return exportToken(sym.LIKE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 89: break;
          case 39: 
            { return exportToken(sym.CATCH, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 90: break;
          case 40: 
            { return exportToken(sym.CLASS, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 91: break;
          case 41: 
            { return exportToken(sym.ENCAPSULATE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 92: break;
          case 42: 
            { return exportToken(sym.WHILE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 93: break;
          case 43: 
            { return exportToken(sym.BASED, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 94: break;
          case 44: 
            { return exportToken(sym.RETURN, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 95: break;
          case 45: 
            { return exportToken(sym.SWITCH, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 96: break;
          case 46: 
            { return exportToken(sym.FOREACH, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 97: break;
          case 47: 
            { return exportToken(sym.BEHAVES, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 98: break;
          case 48: 
            { return exportToken(sym.EMPTY, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 99: break;
          case 49: 
            { return exportToken(sym.FUNCTION, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 100: break;
          case 50: 
            { return exportToken(sym.INSTANCE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 101: break;
          case 51: 
            { return exportToken(sym.BEHAVIOUR, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java EogenLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        EogenLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new EogenLexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
